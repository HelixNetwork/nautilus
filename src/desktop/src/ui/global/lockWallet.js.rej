diff a/src/desktop/src/ui/global/lockWallet.js b/src/desktop/src/ui/global/lockWallet.js	(rejected hunks)
@@ -1,4 +1,4 @@
-import React from "react";
-import { connect } from "react-redux";
-import PropTypes from "prop-types";
-import debounce from "lodash/debounce";
+import React from 'react';
+import { connect } from 'react-redux';
+import PropTypes from 'prop-types';
+import debounce from 'lodash/debounce';
@@ -6 +6 @@ import debounce from "lodash/debounce";
-import { setPassword } from "actions/wallet";
+import { setPassword } from 'actions/wallet';
@@ -8 +8 @@ import { setPassword } from "actions/wallet";
-import ModalPassword from "ui/components/modal/Password";
+import ModalPassword from 'ui/components/modal/Password';
@@ -10 +10 @@ import ModalPassword from "ui/components/modal/Password";
-const events = ["mousemove", "mousedown", "keydown", "touchstart", "scroll"];
+const events = ['mousemove', 'mousedown', 'keydown', 'touchstart', 'scroll'];
@@ -16,21 +16,16 @@ class LockWallet extends React.Component {
-  static propTypes = {
-    setPassword: PropTypes.func.isRequired,
-    timeout: PropTypes.number.isRequired,
-    isAuthorised: PropTypes.bool.isRequired
-  };
-
-  state = {
-    locked: false
-  };
-
-  componentDidMount() {
-    this.restartLockTimeout = debounce(this.handleEvent, 500);
-    this.attachEvents();
-    this.onSetIdle = this.lock.bind(this);
-    // eslint-disable-next-line no-undef
-    Electron.onEvent("lockScreen", this.onSetIdle);
-  }
-
-  componentWillReceiveProps(nextProps) {
-    if (!this.props.isAuthorised && nextProps.isAuthorised) {
-      this.handleEvent();
+    static propTypes = {
+        setPassword: PropTypes.func.isRequired,
+        timeout: PropTypes.number.isRequired,
+        isAuthorised: PropTypes.bool.isRequired,
+    };
+
+    state = {
+        locked: false,
+    };
+
+    componentDidMount() {
+        this.restartLockTimeout = debounce(this.handleEvent, 500);
+        this.attachEvents();
+        this.onSetIdle = this.lock.bind(this);
+        // eslint-disable-next-line no-undef
+        Electron.onEvent('lockScreen', this.onSetIdle);
@@ -38,14 +33,35 @@ class LockWallet extends React.Component {
-  }
-
-  componentWillUnmount() {
-    this.removeEvents();
-    // eslint-disable-next-line no-undef
-    Electron.removeEvent("lockScreen", this.onSetIdle);
-  }
-
-  lock() {
-    if (this.props.isAuthorised) {
-      this.props.setPassword({});
-      this.setState({ locked: true });
-      // eslint-disable-next-line no-undef
-      Electron.updateMenu("enabled", false);
+
+    componentWillReceiveProps(nextProps) {
+        if (!this.props.isAuthorised && nextProps.isAuthorised) {
+            this.handleEvent();
+        }
+    }
+
+    componentWillUnmount() {
+        this.removeEvents();
+        // eslint-disable-next-line no-undef
+        Electron.removeEvent('lockScreen', this.onSetIdle);
+    }
+
+    lock() {
+        if (this.props.isAuthorised) {
+            this.props.setPassword({});
+            this.setState({ locked: true });
+            // eslint-disable-next-line no-undef
+            Electron.updateMenu('enabled', false);
+        }
+    }
+
+    unlock(password) {
+        this.props.setPassword(password);
+        this.setState({
+            locked: false,
+        });
+        // eslint-disable-next-line no-undef
+        Electron.updateMenu('enabled', true);
+    }
+
+    attachEvents() {
+        events.forEach((event) => {
+            window.addEventListener(event, this.restartLockTimeout, true);
+        });
@@ -53,38 +69,24 @@ class LockWallet extends React.Component {
-  }
-
-  unlock(password) {
-    this.props.setPassword(password);
-    this.setState({
-      locked: false
-    });
-    // eslint-disable-next-line no-undef
-    Electron.updateMenu("enabled", true);
-  }
-
-  attachEvents() {
-    events.forEach(event => {
-      window.addEventListener(event, this.restartLockTimeout, true);
-    });
-  }
-
-  removeEvents() {
-    events.forEach(event => {
-      window.removeEventListener(event, this.restartLockTimeout, true);
-    });
-  }
-
-  handleEvent = () => {
-    clearTimeout(this.timeout);
-
-    this.timeout = setTimeout(() => {
-      if (this.props.isAuthorised) {
-        this.lock();
-      } else {
-        this.handleEvent();
-      }
-    }, this.props.timeout * 60 * 1000);
-  };
-
-  render() {
-    if (!this.state.locked) {
-      return null;
+
+    removeEvents() {
+        events.forEach((event) => {
+            window.removeEventListener(event, this.restartLockTimeout, true);
+        });
+    }
+
+    handleEvent = () => {
+        clearTimeout(this.timeout);
+
+        this.timeout = setTimeout(() => {
+            if (this.props.isAuthorised) {
+                this.lock();
+            } else {
+                this.handleEvent();
+            }
+        }, this.props.timeout * 60 * 1000);
+    };
+
+    render() {
+        if (!this.state.locked) {
+            return null;
+        }
+        return <ModalPassword isOpen isForced content={{}} onSuccess={(password) => this.unlock(password)} />;
@@ -92,9 +93,0 @@ class LockWallet extends React.Component {
-    return (
-      <ModalPassword
-        isOpen
-        isForced
-        content={{}}
-        onSuccess={password => this.unlock(password)}
-      />
-    );
-  }
@@ -103,3 +96,3 @@ class LockWallet extends React.Component {
-const mapStateToProps = state => ({
-  timeout: state.settings.lockScreenTimeout,
-  isAuthorised: state.wallet.ready
+const mapStateToProps = (state) => ({
+    timeout: state.settings.lockScreenTimeout,
+    isAuthorised: state.wallet.ready,
@@ -109 +102 @@ const mapDispatchToProps = {
-  setPassword
+    setPassword,
@@ -113,2 +106,2 @@ export default connect(
-  mapStateToProps,
-  mapDispatchToProps
+    mapStateToProps,
+    mapDispatchToProps,
