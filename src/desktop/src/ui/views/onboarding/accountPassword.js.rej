diff a/src/desktop/src/ui/views/onboarding/accountPassword.js b/src/desktop/src/ui/views/onboarding/accountPassword.js	(rejected hunks)
@@ -2,19 +2,19 @@
-import React from "react";
-import { connect } from "react-redux";
-import PropTypes from "prop-types";
-import { withI18n} from "react-i18next";
-import { zxcvbn } from "libs/exports";
-
-import { setAccountInfoDuringSetup } from "actions/accounts";
-import { setPassword } from "actions/wallet";
-import { generateAlert } from "actions/alerts";
-
-import SeedStore from "libs/seed";
-import { hash, initKeychain, initVault } from "libs/crypto";
-import { passwordReasons } from "libs/password";
-
-import Logos from "ui/components/logos";
-import PasswordInput from "ui/components/input/password";
-import css from "./index.scss";
-import Button from "ui/components/button";
-import { Row } from 'react-bootstrap'
+import React from 'react';
+import { connect } from 'react-redux';
+import PropTypes from 'prop-types';
+import { withI18n } from 'react-i18next';
+import { zxcvbn } from 'libs/exports';
+
+import { setAccountInfoDuringSetup } from 'actions/accounts';
+import { setPassword } from 'actions/wallet';
+import { generateAlert } from 'actions/alerts';
+
+import SeedStore from 'libs/seed';
+import { hash, initKeychain, initVault } from 'libs/crypto';
+import { passwordReasons } from 'libs/password';
+
+import Logos from 'ui/components/logos';
+import PasswordInput from 'ui/components/input/password';
+import css from './index.scss';
+import Button from 'ui/components/button';
+import { Row } from 'react-bootstrap';
@@ -23,31 +23,140 @@ class AccountPassword extends React.PureComponent {
-  static propTypes = {
-    setPassword: PropTypes.func.isRequired,
-    history: PropTypes.shape({
-      push: PropTypes.func.isRequired
-    }).isRequired,
-    t: PropTypes.func.isRequired,
-    generateAlert: PropTypes.func.isRequired,
-    additionalAccountName: PropTypes.string.isRequired,
-    additionalAccountMeta: PropTypes.object.isRequired,
-    setAccountInfoDuringSetup: PropTypes.func.isRequired
-  };
-
-  state = {
-    isGenerated: Electron.getOnboardingGenerated(),
-    password: "",
-    passwordConfirm: "",
-    loading: false
-  };
-
-  createAccount = async e => {
-    const {
-      additionalAccountMeta,
-      additionalAccountName,
-      setPassword,
-      history,
-      t,
-      generateAlert
-    } = this.props;
-    const { password, passwordConfirm } = this.state;
-    if (e) {
-      e.preventDefault();
+    static propTypes = {
+        setPassword: PropTypes.func.isRequired,
+        history: PropTypes.shape({
+            push: PropTypes.func.isRequired,
+        }).isRequired,
+        t: PropTypes.func.isRequired,
+        generateAlert: PropTypes.func.isRequired,
+        additionalAccountName: PropTypes.string.isRequired,
+        additionalAccountMeta: PropTypes.object.isRequired,
+        setAccountInfoDuringSetup: PropTypes.func.isRequired,
+    };
+
+    state = {
+        isGenerated: Electron.getOnboardingGenerated(),
+        password: '',
+        passwordConfirm: '',
+        loading: false,
+    };
+
+    createAccount = async (e) => {
+        const { additionalAccountMeta, additionalAccountName, setPassword, history, t, generateAlert } = this.props;
+        const { password, passwordConfirm } = this.state;
+        if (e) {
+            e.preventDefault();
+        }
+
+        if (this.state.loading) {
+            return;
+        }
+
+        const score = zxcvbn(password);
+
+        if (score.score < 4) {
+            const reason = score.feedback.warning
+                ? t(`changePassword:${passwordReasons[score.feedback.warning]}`)
+                : t('changePassword:passwordTooWeakReason');
+
+            return generateAlert('error', t('changePassword:passwordTooWeak'), reason, 1000);
+        }
+
+        if (password !== passwordConfirm) {
+            return generateAlert(
+                'error',
+                t('changePassword:passwordsDoNotMatch'),
+                t('changePassword:passwordsDoNotMatchExplanation'),
+                1000,
+            );
+        }
+
+        this.setState({
+            loading: true,
+        });
+
+        try {
+            await initKeychain();
+        } catch (err) {
+            return generateAlert(
+                'error',
+                t('global:errorAccessingKeychain'),
+                t('global:errorAccessingKeychainExplanation'),
+                1000,
+            );
+        }
+
+        const passwordHash = await hash(password);
+        await initVault(passwordHash);
+        setPassword(passwordHash);
+        this.props.setAccountInfoDuringSetup({
+            completed: true,
+        });
+
+        const seedStore = await new SeedStore[additionalAccountMeta.type](passwordHash);
+        await seedStore.addAccount(additionalAccountName, Electron.getOnboardingSeed());
+        Electron.setOnboardingSeed(null);
+
+        history.push('/onboarding/done');
+    };
+
+    stepBack = (e) => {
+        if (e) {
+            e.preventDefault();
+        }
+
+        const { history } = this.props;
+
+        if (Electron.getOnboardingGenerated()) {
+            history.push('/onboarding/seed-import');
+        } else {
+            history.push('/onboarding/account-name');
+        }
+    };
+
+    render() {
+        const { history, t } = this.props;
+        const { isGenerated } = this.state;
+        const score = zxcvbn(this.state.password);
+
+        return (
+            <section>
+                <Logos size={20} history={history} />
+                <form onSubmit={(e) => this.createAccount(e)}>
+                    <Row>
+                        <h1>{t('setPassword:choosePassword')}</h1>
+                        <span>{t('setPassword:anEncryptedCopy')}</span>
+                    </Row>
+                    <Row className={css.centerBox1}>
+                        <PasswordInput
+                            style={{ marginTop: '3vw' }}
+                            focus
+                            value={this.state.password}
+                            label={t('password')}
+                            showScore
+                            showValid
+                            onChange={(value) => this.setState({ password: value })}
+                        />
+                        <PasswordInput
+                            value={this.state.passwordConfirm}
+                            label={t('setPassword:retypePassword')}
+                            showValid
+                            disabled={score.score < 4}
+                            match={this.state.password}
+                            onChange={(value) => this.setState({ passwordConfirm: value })}
+                        />
+                    </Row>
+
+                    <Row>
+                        <Button
+                            className="navleft"
+                            variant="backgroundNone"
+                            to={`/onboarding/${isGenerated ? 'seed-import' : 'account-name'}`}
+                        >
+                            <span>&lt;</span> {t('global:goBack')}
+                        </Button>
+                        <Button type="submit" className="navright" variant="backgroundNone">
+                            {t('global:confirm')} <span>></span>
+                        </Button>
+                    </Row>
+                </form>
+            </section>
+        );
@@ -55,135 +163,0 @@ class AccountPassword extends React.PureComponent {
-
-    if (this.state.loading) {
-      return;
-    }
-
-    const score = zxcvbn(password);
-
-    if (score.score < 4) {
-      const reason = score.feedback.warning
-        ? t(`changePassword:${passwordReasons[score.feedback.warning]}`)
-        : t("changePassword:passwordTooWeakReason");
-
-      return generateAlert(
-        "error",
-        t("changePassword:passwordTooWeak"),
-        reason,
-        1000
-      );
-    }
-
-    if (password !== passwordConfirm) {
-      return generateAlert(
-        "error",
-        t("changePassword:passwordsDoNotMatch"),
-        t("changePassword:passwordsDoNotMatchExplanation"),
-        1000
-      );
-    }
-
-    this.setState({
-      loading: true
-    });
-
-    try {
-      await initKeychain();
-    } catch (err) {
-      return generateAlert(
-        "error",
-        t("global:errorAccessingKeychain"),
-        t("global:errorAccessingKeychainExplanation"),
-        1000
-      );
-    }
-
-    const passwordHash = await hash(password);
-    await initVault(passwordHash);
-    setPassword(passwordHash);
-    this.props.setAccountInfoDuringSetup({
-      completed: true
-    });
-
-    const seedStore = await new SeedStore[additionalAccountMeta.type](
-      passwordHash
-    );
-    await seedStore.addAccount(
-      additionalAccountName,
-      Electron.getOnboardingSeed()
-    );
-    Electron.setOnboardingSeed(null);
-
-    history.push("/onboarding/done");
-  };
-
-  stepBack = e => {
-    if (e) {
-      e.preventDefault();
-    }
-
-    const { history } = this.props;
-
-    if (Electron.getOnboardingGenerated()) {
-      history.push("/onboarding/seed-import");
-    } else {
-      history.push("/onboarding/account-name");
-    }
-  };
-
-  render() {
-    const { history, t } = this.props;
-    const { isGenerated } = this.state;
-    const score = zxcvbn(this.state.password);
-
-    return (
-      <section>
-        <Logos size={20} history={history} />
-        <form onSubmit={e => this.createAccount(e)}>
-
-          <Row>
-            <h1>{t("setPassword:choosePassword")}</h1>
-            <span>{t("setPassword:anEncryptedCopy")}</span>
-          </Row>
-          <Row className={css.centerBox1}>
-            <PasswordInput
-              style={{ marginTop: "3vw" }}
-              focus
-              value={this.state.password}
-              label={t("password")}
-              showScore
-              showValid
-              onChange={value => this.setState({ password: value })}
-            />
-            <PasswordInput
-              value={this.state.passwordConfirm}
-              label={t("setPassword:retypePassword")}
-              showValid
-              disabled={score.score < 4}
-              match={this.state.password}
-              onChange={value => this.setState({ passwordConfirm: value })}
-            />
-          </Row>
-
-          <Row>
-            <Button
-              className="navleft"
-              variant="backgroundNone"
-              to={`/onboarding/${
-                isGenerated ? "seed-import" : "account-name"
-                }`}
-            >
-            <span>&lt;</span>  {t("global:goBack")} 
-            </Button>
-            <Button
-              type="submit"
-              className="navright"
-              variant="backgroundNone"
-            >
-              {t("global:confirm")} <span>></span>
-            </Button>
-          </Row>
-
-
-        </form>
-      </section>
-    );
-  }
@@ -192,3 +166,3 @@ class AccountPassword extends React.PureComponent {
-const mapStateToProps = state => ({
-  additionalAccountMeta: state.accounts.accountInfoDuringSetup.meta,
-  additionalAccountName: state.accounts.accountInfoDuringSetup.name
+const mapStateToProps = (state) => ({
+    additionalAccountMeta: state.accounts.accountInfoDuringSetup.meta,
+    additionalAccountName: state.accounts.accountInfoDuringSetup.name,
@@ -198,3 +172,3 @@ const mapDispatchToProps = {
-  setPassword,
-  setAccountInfoDuringSetup,
-  generateAlert
+    setPassword,
+    setAccountInfoDuringSetup,
+    generateAlert,
@@ -204,2 +178,2 @@ export default connect(
-  mapStateToProps,
-  mapDispatchToProps
+    mapStateToProps,
+    mapDispatchToProps,
