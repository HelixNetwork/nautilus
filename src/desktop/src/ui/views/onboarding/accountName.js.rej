diff a/src/desktop/src/ui/views/onboarding/accountName.js b/src/desktop/src/ui/views/onboarding/accountName.js	(rejected hunks)
@@ -1,16 +1,16 @@
-import React from "react";
-import { connect } from "react-redux";
-import PropTypes from "prop-types";
-import { withI18n} from "react-i18next";
-
-import { getAccountNamesFromState } from "selectors/accounts";
-import { generateAlert } from "actions/alerts";
-import classNames from "classnames";
-import Button from "ui/components/button";
-import Input from "ui/components/input/text";
-import { setAccountInfoDuringSetup } from "actions/accounts";
-import css from "./index.scss";
-import Logos from "ui/components/logos";
-import { MAX_ACC_LENGTH } from "libs/crypto";
-import SeedStore from "libs/seed";
-import {Row} from 'react-bootstrap'
+import React from 'react';
+import { connect } from 'react-redux';
+import PropTypes from 'prop-types';
+import { withI18n } from 'react-i18next';
+
+import { getAccountNamesFromState } from 'selectors/accounts';
+import { generateAlert } from 'actions/alerts';
+import classNames from 'classnames';
+import Button from 'ui/components/button';
+import Input from 'ui/components/input/text';
+import { setAccountInfoDuringSetup } from 'actions/accounts';
+import css from './index.scss';
+import Logos from 'ui/components/logos';
+import { MAX_ACC_LENGTH } from 'libs/crypto';
+import SeedStore from 'libs/seed';
+import { Row } from 'react-bootstrap';
@@ -19,16 +19,10 @@ class AccountName extends React.PureComponent {
-  static propTypes = {
-    history: PropTypes.object,
-    t: PropTypes.func.isRequired,
-    generateAlert: PropTypes.func.isRequired,
-    accountNames: PropTypes.array.isRequired,
-    additionalAccountMeta: PropTypes.object.isRequired,
-    additionalAccountName: PropTypes.string.isRequired,
-    setAccountInfoDuringSetup: PropTypes.func.isRequired
-  };
-  state = {
-    // eslint-disable-next-line no-undef
-    isGenerated: Electron.getOnboardingGenerated(),
-
-    name:
-      // eslint-disable-next-line no-undef
-      Electron.getOnboardingName() && Electron.getOnboardingName().length
+    static propTypes = {
+        history: PropTypes.object,
+        t: PropTypes.func.isRequired,
+        generateAlert: PropTypes.func.isRequired,
+        accountNames: PropTypes.array.isRequired,
+        additionalAccountMeta: PropTypes.object.isRequired,
+        additionalAccountName: PropTypes.string.isRequired,
+        setAccountInfoDuringSetup: PropTypes.func.isRequired,
+    };
+    state = {
@@ -36,21 +30 @@ class AccountName extends React.PureComponent {
-        ? Electron.getOnboardingName()
-        : ""
-  };
-
-  setName = async event => {
-    event.preventDefault();
-
-    const { wallet, accountNames, history, generateAlert, t } = this.props;
-    const name = this.state.name.replace(/^\s+|\s+$/g, "");
-
-    // eslint-disable-next-line no-undef
-    Electron.setOnboardingName(name);
-    if (!name.length) {
-      generateAlert(
-        "error",
-        t("addAdditionalSeed:noNickname"),
-        t("addAdditionalSeed:noNicknameExplanation"),
-        1000
-      );
-      return;
-    }
+        isGenerated: Electron.getOnboardingGenerated(),
@@ -58,11 +32,10 @@ class AccountName extends React.PureComponent {
-    if (name.length > MAX_ACC_LENGTH) {
-      generateAlert(
-        "error",
-        t("addAdditionalSeed:accountNameTooLong"),
-        t("addAdditionalSeed:accountNameTooLongExplanation", {
-          maxLength: MAX_ACC_LENGTH
-        }),
-        1000
-      );
-      return;
-    }
+        name:
+            // eslint-disable-next-line no-undef
+            Electron.getOnboardingName() && Electron.getOnboardingName().length
+                ? // eslint-disable-next-line no-undef
+                  Electron.getOnboardingName()
+                : '',
+    };
+
+    setName = async (event) => {
+        event.preventDefault();
@@ -70,21 +43,95 @@ class AccountName extends React.PureComponent {
-    if (accountNames.map((accountName) => accountName.toLowerCase()).indexOf(name.toLowerCase()) > -1) {
-      generateAlert('error', t('addAdditionalSeed:nameInUse'), t('addAdditionalSeed:nameInUseExplanation'));
-      return;
-  }
-
-    this.props.setAccountInfoDuringSetup({
-      name: this.state.name,
-      // eslint-disable-next-line no-undef
-      completed: !Electron.getOnboardingGenerated() && accountNames.length > 0
-    });
-
-    // eslint-disable-next-line no-undef
-    if (Electron.getOnboardingGenerated()) {
-      history.push("/onboarding/seed-backup");
-    } else {
-      if (accountNames.length > 0) {
-        const seedStore = await new SeedStore.keychain(wallet.password);
-        await seedStore.addAccount(
-          this.state.name,
-          // eslint-disable-next-line no-undef
-          Electron.getOnboardingSeed()
+        const { wallet, accountNames, history, generateAlert, t } = this.props;
+        const name = this.state.name.replace(/^\s+|\s+$/g, '');
+
+        // eslint-disable-next-line no-undef
+        Electron.setOnboardingName(name);
+        if (!name.length) {
+            generateAlert(
+                'error',
+                t('addAdditionalSeed:noNickname'),
+                t('addAdditionalSeed:noNicknameExplanation'),
+                1000,
+            );
+            return;
+        }
+
+        if (name.length > MAX_ACC_LENGTH) {
+            generateAlert(
+                'error',
+                t('addAdditionalSeed:accountNameTooLong'),
+                t('addAdditionalSeed:accountNameTooLongExplanation', {
+                    maxLength: MAX_ACC_LENGTH,
+                }),
+                1000,
+            );
+            return;
+        }
+
+        if (accountNames.map((accountName) => accountName.toLowerCase()).indexOf(name.toLowerCase()) > -1) {
+            generateAlert('error', t('addAdditionalSeed:nameInUse'), t('addAdditionalSeed:nameInUseExplanation'));
+            return;
+        }
+
+        this.props.setAccountInfoDuringSetup({
+            name: this.state.name,
+            // eslint-disable-next-line no-undef
+            completed: !Electron.getOnboardingGenerated() && accountNames.length > 0,
+        });
+
+        // eslint-disable-next-line no-undef
+        if (Electron.getOnboardingGenerated()) {
+            history.push('/onboarding/seed-backup');
+        } else {
+            if (accountNames.length > 0) {
+                const seedStore = await new SeedStore.keychain(wallet.password);
+                await seedStore.addAccount(
+                    this.state.name,
+                    // eslint-disable-next-line no-undef
+                    Electron.getOnboardingSeed(),
+                );
+                history.push('/onboarding/login');
+            } else {
+                history.push('/onboarding/account-password');
+            }
+        }
+    };
+
+    render() {
+        const { history, t } = this.props;
+        const { name, isGenerated } = this.state;
+
+        return (
+            <div>
+                <Logos size={20} history={history} />
+                <form onSubmit={this.setName}>
+                    <Row>
+                        <h1>
+                            {t('setSeedName:setAccountName')}
+                            <span className={classNames(css.text_color)}>.</span>
+                        </h1>
+                    </Row>
+                    <Row className={css.centerBox}>
+                        <div style={{ margin: '5vw' }}>
+                            <Input
+                                value={name}
+                                focus
+                                label={t('addAdditionalSeed:accountName')}
+                                onChange={(value) => this.setState({ name: value })}
+                            />
+                        </div>
+                    </Row>
+
+                    <Row>
+                        <Button
+                            className="navleft"
+                            variant="backgroundNone"
+                            to={`/onboarding/seed-${isGenerated ? 'generate' : 'import'}`}
+                        >
+                            <span>&lt;</span> {t('global:goBack')}
+                        </Button>
+                        <Button type="submit" className="navright" variant="backgroundNone">
+                            {t('global:confirm')} <span>></span>
+                        </Button>
+                    </Row>
+                </form>
+            </div>
@@ -92,4 +138,0 @@ class AccountName extends React.PureComponent {
-        history.push("/onboarding/login");
-      } else {
-        history.push("/onboarding/account-password");
-      }
@@ -97,51 +139,0 @@ class AccountName extends React.PureComponent {
-  };
-
-  render() {
-    const { history, t} = this.props;
-    const { name, isGenerated } = this.state;
-
-    return (
-      <div>
-        <Logos size={20} history={history} />
-        <form onSubmit={this.setName}>
-          <Row>
-            <h1>
-              {t("setSeedName:setAccountName")}
-              <span className={classNames(css.text_color)}>.</span>
-            </h1>
-          </Row>
-          <Row className={css.centerBox}>
-            <div style= {{margin: "5vw"}}>
-            <Input
-              value={name}
-              focus
-              label={t("addAdditionalSeed:accountName")}
-              onChange={value => this.setState({ name: value })}
-            />
-            </div>
-          </Row>
-
-          <Row>
-            <Button
-              className="navleft"
-              variant="backgroundNone"
-              to={`/onboarding/seed-${isGenerated ? "generate" : "import"}`}
-            >
-             <span>&lt;</span> {t("global:goBack")} 
-            </Button>
-            <Button
-              type="submit"
-              className="navright"
-              variant="backgroundNone"
-            >
-              {t("global:confirm")} <span>></span>
-            </Button>
-          </Row>
-
-
-        </form>
-      </div>
-
-
-    );
-  }
@@ -150,10 +142,10 @@ class AccountName extends React.PureComponent {
-const mapStateToProps = state => ({
-  accountNames: getAccountNamesFromState(state),
-  additionalAccountMeta: state.accounts.accountInfoDuringSetup.meta
-    ? state.accounts.accountInfoDuringSetup.meta
-    : { type: "Keychain" },
-  additionalAccountName: state.accounts.accountInfoDuringSetup.name
-    ? state.accounts.accountInfoDuringSetup.name
-    // eslint-disable-next-line no-undef
-    : Electron.getOnboardingName(),
-  wallet: state.wallet
+const mapStateToProps = (state) => ({
+    accountNames: getAccountNamesFromState(state),
+    additionalAccountMeta: state.accounts.accountInfoDuringSetup.meta
+        ? state.accounts.accountInfoDuringSetup.meta
+        : { type: 'Keychain' },
+    additionalAccountName: state.accounts.accountInfoDuringSetup.name
+        ? state.accounts.accountInfoDuringSetup.name
+        : // eslint-disable-next-line no-undef
+          Electron.getOnboardingName(),
+    wallet: state.wallet,
@@ -163,2 +155,2 @@ const mapDispatchToProps = {
-  setAccountInfoDuringSetup,
-  generateAlert
+    setAccountInfoDuringSetup,
+    generateAlert,
@@ -168,2 +160,2 @@ export default connect(
-  mapStateToProps,
-  mapDispatchToProps
+    mapStateToProps,
+    mapDispatchToProps,
