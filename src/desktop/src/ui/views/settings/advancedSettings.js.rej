diff a/src/desktop/src/ui/views/settings/advancedSettings.js b/src/desktop/src/ui/views/settings/advancedSettings.js	(rejected hunks)
@@ -1,18 +1,15 @@
-import React from "react";
-import css from "./settings.scss";
-import classNames from "classnames";
-import PropTypes from "prop-types";
-import { withI18n, Trans } from "react-i18next";
-import { connect } from "react-redux";
-import { clearVault } from "libs/crypto";
-import { reinitialise as reinitialiseStorage } from "database";
-import { getEncryptionKey, ALIAS_REALM } from "libs/realm";
-import { changePowSettings,
-          changeAutoPromotionSettings, 
-          setNotifications, 
-          setProxy } from "actions/settings";
-import { generateAlert } from "actions/alerts";
-import Button from "ui/components/button";
-import Confirm from "ui/components/modal/Confirm";
-import Scrollbar from "ui/components/scrollbar";
-import ModalPassword from "ui/components/modal/Password";
+import React from 'react';
+import css from './settings.scss';
+import classNames from 'classnames';
+import PropTypes from 'prop-types';
+import { withI18n, Trans } from 'react-i18next';
+import { connect } from 'react-redux';
+import { clearVault } from 'libs/crypto';
+import { reinitialise as reinitialiseStorage } from 'database';
+import { getEncryptionKey, ALIAS_REALM } from 'libs/realm';
+import { changePowSettings, changeAutoPromotionSettings, setNotifications, setProxy } from 'actions/settings';
+import { generateAlert } from 'actions/alerts';
+import Button from 'ui/components/button';
+import Confirm from 'ui/components/modal/Confirm';
+import Scrollbar from 'ui/components/scrollbar';
+import ModalPassword from 'ui/components/modal/Password';
@@ -20 +17 @@ import Checkbox from 'ui/components/checkbox';
-import Toggle from "ui/components/toggle";
+import Toggle from 'ui/components/toggle';
@@ -27,22 +24,23 @@ class AdvancedSettings extends React.PureComponent {
-  static propTypes = {
-    location: PropTypes.object,
-    history: PropTypes.shape({
-      push: PropTypes.func.isRequired
-    }).isRequired,
-    t: PropTypes.func.isRequired,
-    changePowSettings: PropTypes.func.isRequired,
-    notificationLog: PropTypes.array.isRequired,
-    setNotifications: PropTypes.func.isRequired,
-    setProxy: PropTypes.func.isRequired,
-    generateAlert: PropTypes.func.isRequired,
-    changeAutoPromotionSettings: PropTypes.func.isRequired,
-    wallet: PropTypes.object,
-    settings: PropTypes.object.isRequired
-  };
-  state = {
-    resetConfirm: false,
-    resetCountdown: 0
-  };
-  componentWillUnmount() {
-    if (this.interval) {
-      clearInterval(this.interval);
+    static propTypes = {
+        location: PropTypes.object,
+        history: PropTypes.shape({
+            push: PropTypes.func.isRequired,
+        }).isRequired,
+        t: PropTypes.func.isRequired,
+        changePowSettings: PropTypes.func.isRequired,
+        notificationLog: PropTypes.array.isRequired,
+        setNotifications: PropTypes.func.isRequired,
+        setProxy: PropTypes.func.isRequired,
+        generateAlert: PropTypes.func.isRequired,
+        changeAutoPromotionSettings: PropTypes.func.isRequired,
+        wallet: PropTypes.object,
+        settings: PropTypes.object.isRequired,
+    };
+    state = {
+        resetConfirm: false,
+        resetCountdown: 0,
+    };
+    componentWillUnmount() {
+        if (this.interval) {
+            clearInterval(this.interval);
+        }
@@ -50,16 +48,11 @@ class AdvancedSettings extends React.PureComponent {
-  }
-  /**
-  * Enable/disable global system proxy bypass
-  * @returns {undefined}
-  */
-  setProxy = () => {
-    const enabled = !this.props.settings.ignoreProxy;
-    // eslint-disable-next-line no-undef
-    Electron.setStorage('ignore-proxy', enabled);
-    this.props.setProxy(enabled);
-    console.log("setting node proxy");
-  };
-
-  //reset wallet
-  resetWallet = async () => {
-    const { t, generateAlert } = this.props;
+    /**
+     * Enable/disable global system proxy bypass
+     * @returns {undefined}
+     */
+    setProxy = () => {
+        const enabled = !this.props.settings.ignoreProxy;
+        // eslint-disable-next-line no-undef
+        Electron.setStorage('ignore-proxy', enabled);
+        this.props.setProxy(enabled);
+        console.log('setting node proxy');
+    };
@@ -67,5 +60,3 @@ class AdvancedSettings extends React.PureComponent {
-    try {
-      await clearVault(ALIAS_REALM);
-      localStorage.clear();
-      // eslint-disable-next-line no-undef
-      Electron.clearStorage();
+    //reset wallet
+    resetWallet = async () => {
+        const { t, generateAlert } = this.props;
@@ -73,13 +64,5 @@ class AdvancedSettings extends React.PureComponent {
-      await reinitialiseStorage(getEncryptionKey);
-
-      // eslint-disable-next-line no-undef
-      Electron.reload();
-    } catch (err) {
-      generateAlert(
-        "error",
-        t("changePassword:incorrectPassword"),
-        t("changePassword:incorrectPasswordExplanation")
-      );
-      return;
-    }
-  };
+        try {
+            await clearVault(ALIAS_REALM);
+            localStorage.clear();
+            // eslint-disable-next-line no-undef
+            Electron.clearStorage();
@@ -87,2 +70 @@ class AdvancedSettings extends React.PureComponent {
-  confirmReset = () => {
-    const { wallet } = this.props;
+            await reinitialiseStorage(getEncryptionKey);
@@ -90,8 +72,9 @@ class AdvancedSettings extends React.PureComponent {
-    this.setState({
-      resetConfirm: !this.state.resetConfirm,
-      resetCountdown: 15
-    });
-    if (!wallet || !wallet.isOpen) {
-      this.interval = setInterval(() => {
-        if (this.state.resetCountdown === 1) {
-          clearInterval(this.interval);
+            // eslint-disable-next-line no-undef
+            Electron.reload();
+        } catch (err) {
+            generateAlert(
+                'error',
+                t('changePassword:incorrectPassword'),
+                t('changePassword:incorrectPasswordExplanation'),
+            );
+            return;
@@ -101 +88,2 @@ class AdvancedSettings extends React.PureComponent {
-          resetCountdown: this.state.resetCountdown - 1
+            resetConfirm: !this.state.resetConfirm,
+            resetCountdown: 15,
@@ -103,3 +91,5 @@ class AdvancedSettings extends React.PureComponent {
-      }, 1000);
-    }
-  };
+        if (!wallet || !wallet.isOpen) {
+            this.interval = setInterval(() => {
+                if (this.state.resetCountdown === 1) {
+                    clearInterval(this.interval);
+                }
@@ -107,9 +97,6 @@ class AdvancedSettings extends React.PureComponent {
-  render() {
-    const { t, 
-      settings, 
-      wallet, 
-      changePowSettings, 
-      changeAutoPromotionSettings, 
-      setNotifications ,
-    } = this.props;
-    const { resetConfirm, resetCountdown } = this.state;
+                this.setState({
+                    resetCountdown: this.state.resetCountdown - 1,
+                });
+            }, 1000);
+        }
+    };
@@ -117,7 +104,3 @@ class AdvancedSettings extends React.PureComponent {
-    return (
-      <div className={classNames(css.foo_bxx12)}>
-        <Scrollbar>
-          <div className={classNames(css.set_bxac)}>
-            <h3 style={{ marginLeft: "25vw", marginTop: "0vw" }}>
-              {t("pow:powUpdated")}
-            </h3>
+    render() {
+        const { t, settings, wallet, changePowSettings, changeAutoPromotionSettings, setNotifications } = this.props;
+        const { resetConfirm, resetCountdown } = this.state;
@@ -125,12 +108,5 @@ class AdvancedSettings extends React.PureComponent {
-            {/* <hr className={classNames(css.setinghr)} /> */}
-            <p className= {css.p_opacity} style={{ marginLeft: "5vw", marginTop: "2vw" }}>
-              {t("pow:feeless")} {t("pow:localOrRemote")}
-            </p>
-            <Toggle
-              checked={settings.remotePoW}
-              onChange={() => changePowSettings()}
-              on={t("pow:remote")}
-              off={t("pow:local")}
-            />
-            {/* <hr className={classNames(css.setinghr)}/> */}
-            <h3 style={{ marginLeft: "27vw", marginTop: "3vw" }}>{t('advancedSettings:autoPromotion')}</h3>
+        return (
+            <div className={classNames(css.foo_bxx12)}>
+                <Scrollbar>
+                    <div className={classNames(css.set_bxac)}>
+                        <h3 style={{ marginLeft: '25vw', marginTop: '0vw' }}>{t('pow:powUpdated')}</h3>
@@ -138,91 +114,44 @@ class AdvancedSettings extends React.PureComponent {
-            <p className= {css.p_opacity}>{t('advancedSettings:autoPromotionExplanation')}</p>
-            <Toggle
-              checked={settings.autoPromotion}
-              onChange={() => changeAutoPromotionSettings()}
-              on={t('enabled')}
-              off={t('disabled')}
-            />
-              {/* <hr className={classNames(css.setinghr)}/> */}
-            <h3 style={{ marginLeft: "27vw" }}>{t('notifications:notifications')}</h3>
-            <Toggle
-              checked={settings.notifications.general}
-              onChange={() =>
-                setNotifications({ type: 'general', enabled: !settings.notifications.general })
-              }
-              on={t('enabled')}
-              off={t('disabled')}
-            />
-            <Checkbox
-              disabled={!settings.notifications.general}
-              checked={settings.notifications.confirmations}
-              label={t('notifications:typeConfirmations')}
-              className="small"
-              onChange={(value) => setNotifications({ type: 'confirmations', enabled: value })}
-            />
-            <Checkbox
-              disabled={!settings.notifications.general}
-              checked={settings.notifications.messages}
-              label={t('notifications:typeMessages')}
-              className="small"
-              onChange={(value) => setNotifications({ type: 'messages', enabled: value })}
-            />
-            
-            <p className= {css.p_opacity} style={{ marginLeft: "19vw", marginTop: "2vw" }}>{t('notifications:notificationExplanation')}</p>
-            {/* <hr className={classNames(css.setinghr1)} /> */}
-            <React.Fragment>
-              <h3 style={{ marginLeft: "27vw" }}>{t('proxy:proxy')}</h3>
-              <Toggle
-                checked={!settings.ignoreProxy}
-                onChange={this.setProxy}
-                on={t('enabled')}
-                off={t('disabled')}
-              />
-              <p className= {css.p_opacity}>{t('proxy:proxyExplanation')}</p>
-             
-            </React.Fragment>
-            {/* <hr className={classNames(css.setinghr2)} /> */}
-            <h3 style={{ marginLeft: "29vw", marginTop: "2vw" }}>
-              {t("settings:reset")}
-            </h3>
-            {/* <hr className={classNames(css.setinghr3)} /> */}
-            <Trans i18nKey="walletResetConfirmation:warning">
-              <p className= {css.p_opacity}>
-                <React.Fragment>
-                  All of your wallet data including your{" "}
-                </React.Fragment>
-                <strong>seeds, password,</strong>
-                <React.Fragment>and </React.Fragment>
-                <strong>other account information</strong>
-                <React.Fragment> will be lost.</React.Fragment>
-              </p>
-            </Trans>
-            <Button
-              variant="negative"
-              className="reset_button"
-              style={{ marginLeft: "26vw", marginTop: "2vw", backgroundColor: "#182051" }}
-              onClick={this.confirmReset}
-            >
-              {t("settings:reset")}
-            </Button>
-            
-            {wallet && wallet.ready ? (
-              <ModalPassword
-                isOpen={resetConfirm}
-                category="negative"
-                onSuccess={() => this.resetWallet()}
-                onClose={() => this.setState({ resetConfirm: false })}
-                content={{
-                  title: t("walletResetConfirmation:cannotUndo"),
-                  message: (
-                    <Trans i18nKey="walletResetConfirmation:warning">
-                      <React.Fragment>
-                        <React.Fragment>
-                          All of your wallet data including your{" "}
-                        </React.Fragment>
-                        <strong>seeds, password,</strong>
-                        <React.Fragment>and </React.Fragment>
-                        <strong>other account information</strong>
-                        <React.Fragment> will be lost.</React.Fragment>
-                      </React.Fragment>
-                    </Trans>
-                  ),
+                        {/* <hr className={classNames(css.setinghr)} /> */}
+                        <p className={css.p_opacity} style={{ marginLeft: '5vw', marginTop: '2vw' }}>
+                            {t('pow:feeless')} {t('pow:localOrRemote')}
+                        </p>
+                        <Toggle
+                            checked={settings.remotePoW}
+                            onChange={() => changePowSettings()}
+                            on={t('pow:remote')}
+                            off={t('pow:local')}
+                        />
+                        {/* <hr className={classNames(css.setinghr)}/> */}
+                        <h3 style={{ marginLeft: '27vw', marginTop: '3vw' }}>{t('advancedSettings:autoPromotion')}</h3>
+
+                        <p className={css.p_opacity}>{t('advancedSettings:autoPromotionExplanation')}</p>
+                        <Toggle
+                            checked={settings.autoPromotion}
+                            onChange={() => changeAutoPromotionSettings()}
+                            on={t('enabled')}
+                            off={t('disabled')}
+                        />
+                        {/* <hr className={classNames(css.setinghr)}/> */}
+                        <h3 style={{ marginLeft: '27vw' }}>{t('notifications:notifications')}</h3>
+                        <Toggle
+                            checked={settings.notifications.general}
+                            onChange={() =>
+                                setNotifications({ type: 'general', enabled: !settings.notifications.general })
+                            }
+                            on={t('enabled')}
+                            off={t('disabled')}
+                        />
+                        <Checkbox
+                            disabled={!settings.notifications.general}
+                            checked={settings.notifications.confirmations}
+                            label={t('notifications:typeConfirmations')}
+                            className="small"
+                            onChange={(value) => setNotifications({ type: 'confirmations', enabled: value })}
+                        />
+                        <Checkbox
+                            disabled={!settings.notifications.general}
+                            checked={settings.notifications.messages}
+                            label={t('notifications:typeMessages')}
+                            className="small"
+                            onChange={(value) => setNotifications({ type: 'messages', enabled: value })}
+                        />
@@ -230,11 +159,4 @@ class AdvancedSettings extends React.PureComponent {
-                  confirm: t("settings:reset")
-                }}
-              />
-            ) : (
-                <Confirm
-                  isOpen={resetConfirm}
-                  category="negative"
-                  content={{
-                    title: t("walletResetConfirmation:cannotUndo"),
-                    message: (
-                      <Trans i18nKey="walletResetConfirmation:warning">
+                        <p className={css.p_opacity} style={{ marginLeft: '19vw', marginTop: '2vw' }}>
+                            {t('notifications:notificationExplanation')}
+                        </p>
+                        {/* <hr className={classNames(css.setinghr1)} /> */}
@@ -242,7 +164,8 @@ class AdvancedSettings extends React.PureComponent {
-                          <React.Fragment>
-                            All of your wallet data including your{" "}
-                          </React.Fragment>
-                          <strong>seeds, password,</strong>
-                          <React.Fragment>and </React.Fragment>
-                          <strong>other account information</strong>
-                          <React.Fragment> will be lost.</React.Fragment>
+                            <h3 style={{ marginLeft: '27vw' }}>{t('proxy:proxy')}</h3>
+                            <Toggle
+                                checked={!settings.ignoreProxy}
+                                onChange={this.setProxy}
+                                on={t('enabled')}
+                                off={t('disabled')}
+                            />
+                            <p className={css.p_opacity}>{t('proxy:proxyExplanation')}</p>
@@ -250,16 +173,75 @@ class AdvancedSettings extends React.PureComponent {
-                      </Trans>
-                    ),
-                    cancel: t("cancel"),
-                    confirm: t("settings:reset")
-                  }}
-                  onCancel={() => this.setState({ resetConfirm: false })}
-                  countdown={resetCountdown}
-                  onConfirm={() => this.resetWallet()}
-                />
-              )}
-            <div className={classNames(css.spe_bx)}></div>
-          </div>
-        </Scrollbar>
-      </div>
-    );
-  }
+                        {/* <hr className={classNames(css.setinghr2)} /> */}
+                        <h3 style={{ marginLeft: '29vw', marginTop: '2vw' }}>{t('settings:reset')}</h3>
+                        {/* <hr className={classNames(css.setinghr3)} /> */}
+                        <Trans i18nKey="walletResetConfirmation:warning">
+                            <p className={css.p_opacity}>
+                                <React.Fragment>All of your wallet data including your </React.Fragment>
+                                <strong>seeds, password,</strong>
+                                <React.Fragment>and </React.Fragment>
+                                <strong>other account information</strong>
+                                <React.Fragment> will be lost.</React.Fragment>
+                            </p>
+                        </Trans>
+                        <Button
+                            variant="negative"
+                            className="reset_button"
+                            style={{ marginLeft: '26vw', marginTop: '2vw', backgroundColor: '#182051' }}
+                            onClick={this.confirmReset}
+                        >
+                            {t('settings:reset')}
+                        </Button>
+
+                        {wallet && wallet.ready ? (
+                            <ModalPassword
+                                isOpen={resetConfirm}
+                                category="negative"
+                                onSuccess={() => this.resetWallet()}
+                                onClose={() => this.setState({ resetConfirm: false })}
+                                content={{
+                                    title: t('walletResetConfirmation:cannotUndo'),
+                                    message: (
+                                        <Trans i18nKey="walletResetConfirmation:warning">
+                                            <React.Fragment>
+                                                <React.Fragment>All of your wallet data including your </React.Fragment>
+                                                <strong>seeds, password,</strong>
+                                                <React.Fragment>and </React.Fragment>
+                                                <strong>other account information</strong>
+                                                <React.Fragment> will be lost.</React.Fragment>
+                                            </React.Fragment>
+                                        </Trans>
+                                    ),
+
+                                    confirm: t('settings:reset'),
+                                }}
+                            />
+                        ) : (
+                            <Confirm
+                                isOpen={resetConfirm}
+                                category="negative"
+                                content={{
+                                    title: t('walletResetConfirmation:cannotUndo'),
+                                    message: (
+                                        <Trans i18nKey="walletResetConfirmation:warning">
+                                            <React.Fragment>
+                                                <React.Fragment>All of your wallet data including your </React.Fragment>
+                                                <strong>seeds, password,</strong>
+                                                <React.Fragment>and </React.Fragment>
+                                                <strong>other account information</strong>
+                                                <React.Fragment> will be lost.</React.Fragment>
+                                            </React.Fragment>
+                                        </Trans>
+                                    ),
+                                    cancel: t('cancel'),
+                                    confirm: t('settings:reset'),
+                                }}
+                                onCancel={() => this.setState({ resetConfirm: false })}
+                                countdown={resetCountdown}
+                                onConfirm={() => this.resetWallet()}
+                            />
+                        )}
+                        <div className={classNames(css.spe_bx)}></div>
+                    </div>
+                </Scrollbar>
+            </div>
+        );
+    }
@@ -267,4 +249,4 @@ class AdvancedSettings extends React.PureComponent {
-const mapStateToProps = state => ({
-  settings: state.settings,
-  wallet: state.wallet,
-  notificationLog: state.alerts.notificationLog,
+const mapStateToProps = (state) => ({
+    settings: state.settings,
+    wallet: state.wallet,
+    notificationLog: state.alerts.notificationLog,
@@ -274,5 +256,5 @@ const mapDispatchToProps = {
-  generateAlert,
-  changePowSettings,
-  changeAutoPromotionSettings,
-  setNotifications,
-  setProxy
+    generateAlert,
+    changePowSettings,
+    changeAutoPromotionSettings,
+    setNotifications,
+    setProxy,
@@ -281,2 +263,2 @@ export default connect(
-  mapStateToProps,
-  mapDispatchToProps
+    mapStateToProps,
+    mapDispatchToProps,
