diff a/src/desktop/src/ui/components/dropzone.js b/src/desktop/src/ui/components/dropzone.js	(rejected hunks)
@@ -1,7 +1,7 @@
-import React from "react";
-import PropTypes from "prop-types";
-import { translate } from "react-i18next";
-import { connect } from "react-redux";
-import classNames from "classnames";
-import shield from "../../ui/images/svg/shield.svg";
-import css from "./dropzone.scss";
+import React from 'react';
+import PropTypes from 'prop-types';
+import { translate } from 'react-i18next';
+import { connect } from 'react-redux';
+import classNames from 'classnames';
+import shield from '../../ui/images/svg/shield.svg';
+import css from './dropzone.scss';
@@ -13,20 +13,8 @@ class Dropzone extends React.Component {
-  static propTypes = {
-    /** Succesfull file drop callback
-     * @param {buffer} FileBuffer - Droped file content buffer
-     * @returns {undefined}
-     */
-    onDrop: PropTypes.func.isRequired,
-    /** @ignore */
-    t: PropTypes.func.isRequired
-  };
-
-  constructor(props, context) {
-    super(props, context);
-
-    this.onDragEnter = this.onDragEnter.bind(this);
-    this.onDragLeave = this.onDragLeave.bind(this);
-    this.onDragOver = this.onDragOver.bind(this);
-    this.onDrop = this.onDrop.bind(this);
-
-    this.state = {
-      isDragActive: false
+    static propTypes = {
+        /** Succesfull file drop callback
+         * @param {buffer} FileBuffer - Droped file content buffer
+         * @returns {undefined}
+         */
+        onDrop: PropTypes.func.isRequired,
+        /** @ignore */
+        t: PropTypes.func.isRequired,
@@ -34,41 +22,12 @@ class Dropzone extends React.Component {
-  }
-
-  componentWillMount() {
-    document.addEventListener("dragenter", this.onDragEnter);
-    document.addEventListener("dragover", this.onDragOver);
-    document.addEventListener("dragleave", this.onDragLeave);
-    document.addEventListener("drop", this.onDrop);
-  }
-
-  componentDidMount() {
-    this.parentCount = 0;
-  }
-
-  componentWillUnmount() {
-    document.removeEventListener("dragenter", this.onDragEnter);
-    document.removeEventListener("dragover", this.onDragOver);
-    document.removeEventListener("dragleave", this.onDragLeave);
-    document.removeEventListener("drop", this.onDrop);
-  }
-
-  onDragEnter(e) {
-    e.preventDefault();
-
-    ++this.parentCount;
-
-    this.setState({
-      isDragActive: true
-    });
-  }
-
-  onDragOver(e) {
-    e.preventDefault();
-    e.stopPropagation();
-    return false;
-  }
-
-  onDragLeave(e) {
-    e.preventDefault();
-
-    if (--this.parentCount > 0) {
-      return;
+
+    constructor(props, context) {
+        super(props, context);
+
+        this.onDragEnter = this.onDragEnter.bind(this);
+        this.onDragLeave = this.onDragLeave.bind(this);
+        this.onDragOver = this.onDragOver.bind(this);
+        this.onDrop = this.onDrop.bind(this);
+
+        this.state = {
+            isDragActive: false,
+        };
@@ -77,4 +36,6 @@ class Dropzone extends React.Component {
-    this.setState({
-      isDragActive: false
-    });
-  }
+    componentWillMount() {
+        document.addEventListener('dragenter', this.onDragEnter);
+        document.addEventListener('dragover', this.onDragOver);
+        document.addEventListener('dragleave', this.onDragLeave);
+        document.addEventListener('drop', this.onDrop);
+    }
@@ -82,3 +43,3 @@ class Dropzone extends React.Component {
-  onDrop(e) {
-    e.stopPropagation();
-    e.preventDefault();
+    componentDidMount() {
+        this.parentCount = 0;
+    }
@@ -86 +47,6 @@ class Dropzone extends React.Component {
-    const { onDrop } = this.props;
+    componentWillUnmount() {
+        document.removeEventListener('dragenter', this.onDragEnter);
+        document.removeEventListener('dragover', this.onDragOver);
+        document.removeEventListener('dragleave', this.onDragLeave);
+        document.removeEventListener('drop', this.onDrop);
+    }
@@ -88,3 +54,2 @@ class Dropzone extends React.Component {
-    this.setState({
-      isDragActive: false
-    });
+    onDragEnter(e) {
+        e.preventDefault();
@@ -92 +57 @@ class Dropzone extends React.Component {
-    this.parentCount = 0;
+        ++this.parentCount;
@@ -94 +59,4 @@ class Dropzone extends React.Component {
-    const file = e.dataTransfer ? e.dataTransfer.files[0] : e.target.files[0];
+        this.setState({
+            isDragActive: true,
+        });
+    }
@@ -96,2 +64,4 @@ class Dropzone extends React.Component {
-    if (!file || file.size > 100000) {
-      return onDrop(null);
+    onDragOver(e) {
+        e.preventDefault();
+        e.stopPropagation();
+        return false;
@@ -100 +70,2 @@ class Dropzone extends React.Component {
-    const reader = new FileReader();
+    onDragLeave(e) {
+        e.preventDefault();
@@ -102,2 +73,3 @@ class Dropzone extends React.Component {
-    // Init with empty buffer first
-    onDrop([]);
+        if (--this.parentCount > 0) {
+            return;
+        }
@@ -105,4 +77,10 @@ class Dropzone extends React.Component {
-    reader.onload = e => {
-      const buffer = e.target.result;
-      onDrop(buffer);
-    };
+        this.setState({
+            isDragActive: false,
+        });
+    }
+
+    onDrop(e) {
+        e.stopPropagation();
+        e.preventDefault();
+
+        const { onDrop } = this.props;
@@ -110,18 +88,28 @@ class Dropzone extends React.Component {
-    reader.readAsArrayBuffer(file);
-  }
-
-  open = () => {
-    this.fileInput.value = null;
-    this.fileInput.click();
-  };
-
-  render() {
-    const { t } = this.props;
-    const inputAttributes = {
-      type: "file",
-      style: { display: "none" },
-      multiple: false,
-      onChange: this.onDrop,
-      ref: el => {
-        this.fileInput = el;
-      }
+        this.setState({
+            isDragActive: false,
+        });
+
+        this.parentCount = 0;
+
+        const file = e.dataTransfer ? e.dataTransfer.files[0] : e.target.files[0];
+
+        if (!file || file.size > 100000) {
+            return onDrop(null);
+        }
+
+        const reader = new FileReader();
+
+        // Init with empty buffer first
+        onDrop([]);
+
+        reader.onload = (e) => {
+            const buffer = e.target.result;
+            onDrop(buffer);
+        };
+
+        reader.readAsArrayBuffer(file);
+    }
+
+    open = () => {
+        this.fileInput.value = null;
+        this.fileInput.click();
@@ -130,23 +118,28 @@ class Dropzone extends React.Component {
-    return (
-      <React.Fragment>
-        <div className={classNames(css.filebox)} onClick={this.open}>
-          <h5>
-            <img style={{ width: "86px" }} src={shield} alt="" /> <br />
-            <span style={{ fontSize: "14px" }}>
-              {t("seedVault:dropInstructions")}
-            </span>
-          </h5>
-          <input {...inputAttributes} />
-          <div
-            className={classNames(
-              css.dropzone,
-              this.state.isDragActive && css.active
-            )}
-          >
-            <img style={{ width: "150px" }} src={shield} alt="" />
-            <h1>{t("seedVault:dropInstructions")}</h1>
-          </div>
-        </div>
-      </React.Fragment>
-    );
-  }
+    render() {
+        const { t } = this.props;
+        const inputAttributes = {
+            type: 'file',
+            style: { display: 'none' },
+            multiple: false,
+            onChange: this.onDrop,
+            ref: (el) => {
+                this.fileInput = el;
+            },
+        };
+
+        return (
+            <React.Fragment>
+                <div className={classNames(css.filebox)} onClick={this.open}>
+                    <h5>
+                        <img style={{ width: '86px' }} src={shield} alt="" /> <br />
+                        <span style={{ fontSize: '14px' }}>{t('seedVault:dropInstructions')}</span>
+                    </h5>
+                    <input {...inputAttributes} />
+                    <div className={classNames(css.dropzone, this.state.isDragActive && css.active)}>
+                        <img style={{ width: '150px' }} src={shield} alt="" />
+                        <h1>{t('seedVault:dropInstructions')}</h1>
+                    </div>
+                </div>
+            </React.Fragment>
+        );
+    }
