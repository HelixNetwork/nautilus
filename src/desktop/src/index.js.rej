diff a/src/desktop/src/index.js b/src/desktop/src/index.js	(rejected hunks)
@@ -1,19 +1,19 @@
-import React from "react";
-import { render } from "react-dom";
-import isEmpty from "lodash/isEmpty";
-import get from "lodash/get";
-import assign from "lodash/assign";
-import { I18nextProvider } from "react-i18next";
-import { Provider } from "react-redux";
-import { MemoryRouter as Router } from "react-router";
-import i18next from "libs/i18next";
-import store from "store";
-import Index from "ui/index";
-import { getEncryptionKey } from "libs/realm";
-import { initialise as initialiseStorage } from "database";
-import { updateSchema } from "database/schemas";
-import { assignAccountIndexIfNecessary } from "actions/accounts";
-import { mapStorageToState as mapStorageToStateAction } from "actions/wallet";
-import { mapStorageToState } from "libs/mapStorageToState";
-import Alerts from "ui/global/alert";
-import { changeHelixNode, quorum } from "libs/hlx";
+import React from 'react';
+import { render } from 'react-dom';
+import isEmpty from 'lodash/isEmpty';
+import get from 'lodash/get';
+import assign from 'lodash/assign';
+import { I18nextProvider } from 'react-i18next';
+import { Provider } from 'react-redux';
+import { MemoryRouter as Router } from 'react-router';
+import i18next from 'libs/i18next';
+import store from 'store';
+import Index from 'ui/index';
+import { getEncryptionKey } from 'libs/realm';
+import { initialise as initialiseStorage } from 'database';
+import { updateSchema } from 'database/schemas';
+import { assignAccountIndexIfNecessary } from 'actions/accounts';
+import { mapStorageToState as mapStorageToStateAction } from 'actions/wallet';
+import { mapStorageToState } from 'libs/mapStorageToState';
+import Alerts from 'ui/global/alert';
+import { changeHelixNode, quorum } from 'libs/hlx';
@@ -22,11 +22,11 @@ const init = () => {
-  const modalElement = document.createElement("div");
-  modalElement.id = "modal";
-  document.body.appendChild(modalElement);
-  // eslint-disable-next-line no-undef
-  if (Electron.mode === "tray") {
-  } else {
-    initialiseStorage(getEncryptionKey)
-      .then(() => {
-        // eslint-disable-next-line no-undef
-        const oldPersistedData = Electron.getAllStorage();
-        const hasDataToMigrate = !isEmpty(oldPersistedData);
+    const modalElement = document.createElement('div');
+    modalElement.id = 'modal';
+    document.body.appendChild(modalElement);
+    // eslint-disable-next-line no-undef
+    if (Electron.mode === 'tray') {
+    } else {
+        initialiseStorage(getEncryptionKey)
+            .then(() => {
+                // eslint-disable-next-line no-undef
+                const oldPersistedData = Electron.getAllStorage();
+                const hasDataToMigrate = !isEmpty(oldPersistedData);
@@ -34,5 +34,5 @@ const init = () => {
-        if (hasDataToMigrate) {
-          Object.assign(oldPersistedData.settings, {
-            completedMigration: false
-          });
-        }
+                if (hasDataToMigrate) {
+                    Object.assign(oldPersistedData.settings, {
+                        completedMigration: false,
+                    });
+                }
@@ -40,5 +40,3 @@ const init = () => {
-        // Get persisted data from Realm storage
-        const data = hasDataToMigrate
-          ? updateSchema(oldPersistedData)
-          : mapStorageToState();
-        const node = get(data, "settings.node");
+                // Get persisted data from Realm storage
+                const data = hasDataToMigrate ? updateSchema(oldPersistedData) : mapStorageToState();
+                const node = get(data, 'settings.node');
@@ -46 +44 @@ const init = () => {
-        changeHelixNode(assign({}, node, { provider: node.url }));
+                changeHelixNode(assign({}, node, { provider: node.url }));
@@ -48,4 +46,4 @@ const init = () => {
-        // Set quorum size
-        quorum.setSize(get(data, "settings.quorum.size"));
-        // Update store with persisted state
-        store.dispatch(mapStorageToStateAction(data));
+                // Set quorum size
+                quorum.setSize(get(data, 'settings.quorum.size'));
+                // Update store with persisted state
+                store.dispatch(mapStorageToStateAction(data));
@@ -53,4 +51,2 @@ const init = () => {
-        // Assign accountIndex to every account in accountInfo if it is not assigned already
-        store.dispatch(
-          assignAccountIndexIfNecessary(get(data, "accounts.accountInfo"))
-        );
+                // Assign accountIndex to every account in accountInfo if it is not assigned already
+                store.dispatch(assignAccountIndexIfNecessary(get(data, 'accounts.accountInfo')));
@@ -58,20 +54,20 @@ const init = () => {
-        // Show Wallet window after inital store update
-        // eslint-disable-next-line no-undef
-        Electron.focus();
-      })
-      // eslint-disable-next-line no-console
-      .catch(err => console.log(err));
-  }
-  render(
-    <Provider store={store}>
-      <I18nextProvider i18n={i18next}>
-        <Router>
-          <React.Fragment>
-            <Alerts />
-            <Index />
-          </React.Fragment>
-        </Router>
-      </I18nextProvider>
-    </Provider>,
-    document.getElementById("root")
-  );
+                // Show Wallet window after inital store update
+                // eslint-disable-next-line no-undef
+                Electron.focus();
+            })
+            // eslint-disable-next-line no-console
+            .catch((err) => console.log(err));
+    }
+    render(
+        <Provider store={store}>
+            <I18nextProvider i18n={i18next}>
+                <Router>
+                    <React.Fragment>
+                        <Alerts />
+                        <Index />
+                    </React.Fragment>
+                </Router>
+            </I18nextProvider>
+        </Provider>,
+        document.getElementById('root'),
+    );
