diff a/src/desktop/native/helixTangled.js b/src/desktop/native/helixTangled.js	(rejected hunks)
@@ -1,6 +1,3 @@
-import { processLocalPow , powTx } from "@helixnetwork/pow";
-import { bitsToChars } from "libs/hlx/converter";
-import { generateAddress } from "@helixnetwork/core";
-
-const fork = require("child_process").fork;
-const path = require("path");
+import { processLocalPow, powTx } from '@helixnetwork/pow';
+import { bitsToChars } from 'libs/hlx/converter';
+import { generateAddress } from '@helixnetwork/core';
@@ -18,2 +17,2 @@ const exec = (payload) => {
-  return new Promise((resolve, reject) => {
-      const child = fork(path.resolve(__dirname, 'helixTangled.js'));
+    return new Promise((resolve, reject) => {
+        const child = fork(path.resolve(__dirname, 'helixTangled.js'));
@@ -21 +20 @@ const exec = (payload) => {
-      const { job } = JSON.parse(payload);
+        const { job } = JSON.parse(payload);
@@ -23,2 +22,2 @@ const exec = (payload) => {
-      child.on('message', (message) => {
-          resolve(message);
+        child.on('message', (message) => {
+            resolve(message);
@@ -26,3 +25,3 @@ const exec = (payload) => {
-          clearTimeout(timeout);
-          child.kill();
-      });
+            clearTimeout(timeout);
+            child.kill();
+        });
@@ -30,7 +29,7 @@ const exec = (payload) => {
-      timeout = setTimeout(
-          () => {
-              reject(`Timeout: HelixTangled job: ${job}`);
-              child.kill();
-          },
-          job === 'batchedPow' ? 1800 * 1000 : 80 * 1000,
-      );
+        timeout = setTimeout(
+            () => {
+                reject(`Timeout: HelixTangled job: ${job}`);
+                child.kill();
+            },
+            job === 'batchedPow' ? 1800 * 1000 : 80 * 1000,
+        );
@@ -38,2 +37,2 @@ const exec = (payload) => {
-      child.send(payload);
-  });
+        child.send(payload);
+    });
@@ -45,31 +44,26 @@ const exec = (payload) => {
-process.on("message", async data => {
-  const payload = JSON.parse(data);
-
-  if (payload.job === 'pow') {
-
-    const pow = await powTx(payload.txs, payload.mwm);
-    process.send(pow);
-}
-
-if (payload.job === 'batchedPow') {
-    const pow = await processLocalPow(
-        payload.trunkTransaction,
-        payload.branchTransaction,
-        payload.mwm,
-        payload.txs
-    );
-
-    process.send(pow);
-}
-
-  if (payload.job === "genAddress") {
-    // Recheck
-    // This currently may be an unoptimal way to generate Addresses.
-    let hexSeed = bitsToChars(payload.seed);
-    const addresses = await generateAddress(
-      hexSeed,
-      payload.index,
-      payload.security
-    );
-    process.send(addresses);
-  }
+process.on('message', async (data) => {
+    const payload = JSON.parse(data);
+
+    if (payload.job === 'pow') {
+        const pow = await powTx(payload.txs, payload.mwm);
+        process.send(pow);
+    }
+
+    if (payload.job === 'batchedPow') {
+        const pow = await processLocalPow(
+            payload.trunkTransaction,
+            payload.branchTransaction,
+            payload.mwm,
+            payload.txs,
+        );
+
+        process.send(pow);
+    }
+
+    if (payload.job === 'genAddress') {
+        // Recheck
+        // This currently may be an unoptimal way to generate Addresses.
+        let hexSeed = bitsToChars(payload.seed);
+        const addresses = await generateAddress(hexSeed, payload.index, payload.security);
+        process.send(addresses);
+    }
@@ -79,11 +73,9 @@ const HelixTangled = {
-  powFn: async (txs, mwm) => {
-    return await exec(JSON.stringify({ job: 'pow', txs, mwm }));
-},
-  batchedPowFn: async (txs, trunkTransaction, branchTransaction, mwm) => {
-    return await exec(JSON.stringify({ job: 'batchedPow', txs, trunkTransaction, branchTransaction, mwm }));
-},
-  genFn: async (seed, index, security) => {
-    return await exec(
-      JSON.stringify({ job: "genAddress", seed, index, security })
-    );
- }
+    powFn: async (txs, mwm) => {
+        return await exec(JSON.stringify({ job: 'pow', txs, mwm }));
+    },
+    batchedPowFn: async (txs, trunkTransaction, branchTransaction, mwm) => {
+        return await exec(JSON.stringify({ job: 'batchedPow', txs, trunkTransaction, branchTransaction, mwm }));
+    },
+    genFn: async (seed, index, security) => {
+        return await exec(JSON.stringify({ job: 'genAddress', seed, index, security }));
+    },
