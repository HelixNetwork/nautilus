// import assign from 'lodash/assign';
// import includes from 'lodash/includes';
// import map from 'lodash/map';
// import merge from 'lodash/merge';
// import nock from 'nock';
// import { expect } from 'chai';
// import sinon from 'sinon';
// import { sweep } from '../../../libs/hlx/recovery';
// import { asTransactionObject } from '@helixnetwork/transaction-converter';
// import {
//     LATEST_MILESTONE,
//     LATEST_MILESTONE_INDEX,
//     LATEST_SOLID_SUBTANGLE_MILESTONE,
//     LATEST_SOLID_SUBTANGLE_MILESTONE_INDEX,
// } from '../../__samples__/transactions';
// import { milestoneBytes } from '../../__samples__/txBytes';
// import * as transferUtils from '../../../libs/hlx/transfers';
// import { IRI_API_VERSION } from '../../../config';
// import { EMPTY_HASH_TXBYTES } from '../../../libs/hlx/utils';

// const validSignedBytes = [
//     '53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6c6974792e53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6ce4fcd0a8c5971994263664e30f20b34878024d578ae8872bc746dd9230fc232f000000000000001477616c6c65740000000000000000000000000000000000000000000000000004000000005d27016b000000000000000000000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b02700000d0f55139d66c0d5b99f02171bc30b588372d2dc5fcfa35196fc385e066d000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8077616c6c657400000000016be05df0a10000000000000000000000000000007f000000000000fae0000000000000000000000000000000000000000000000000',
//     '83d2ea6d7638933e6813b10043c4aa592e35ecb503687f3115d71ca5dfad3b76d091bbbf7a3bacc055a89f3722a18d0896e651b8f467d617bee742a9735fd67dc1693a4b5855505dc46dbb483ae16bf048fb45a75540f389af40becd5a76500ff897f5bb4cb74ec2fcb5d38aaf7fe22b0579786e49cca3663350181b32e108e461becbaae8a7233c0a0abaf25dd5919c5c5930828146760a876a8e03256a801ef1782879b13061fc61219286a30767d2d51364bf264901ac47d61dab82ec407668d264a29cf430640e00966453e6a9231924d7806b52cfcf421cee784797c6243afeb5ef926ec1ed1a07cef87638de59b70ce3eb3d90d9b2e531b71bf27ca7bfa4e3bfad33fd9ab69c996cd15162b467c83f7ab855f067320c47dd051a56d8aa6f767d0fe5e4a5c48eb79d08e2d52c3c2c2cb5538f7c7c55c665e716bf1ca74f94f7e5613738baf83e2f9b20e05879f907995ab5ceef358f25e41faed1f6dc2df65faa1234f72cff3902294d3643ca2a37b4d6d84c5b34b42ba6ab2c14477a3a5825bbec33dce8d50ba2201264d7176d7aa7c2a02b7e23fbc73e0c0f2cc69f679d863065f3523edd4dd5e74c15bf83005b157e6cdd771c72df6cbcdfe8c73e67c09eeecd85e0d6cca6e1262f30c3ea1cdb22152311a30a8db6defcd823c1605c4823c6c6ab9d2547fce9674512eebb73fb52a54b60417c97c4a1df8555493172c212548bd3c4b596bf24b16c36aaa69a5ecaf5a8240232380b0a26539b6b8619ffffffffffffffb00000000000000000000000000000000000000000000000000000000000000000000000005d27016b000000000000000100000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b027000000b811d7f6847fae6e577d75c1475199817c2c3816e2ec626ca0bf5c7f3fa00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000000000000000000000016be05df0100000000000000000000000000000007f0000000000004007000000000000000000000000000000000000000000000000',
c9dcb190094bd7e994b72145866a3df2927b2a26a63b724bc25d4d6ae4b000000000000003c0000000000000000000000000000000000000000000000000000000000000000000000005d27016b000000000000000200000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b027000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000000000000000000000016be05dee400000000000000000000000000000007f000000000000e332000000000000000000000000000000000000000000000000'     
// ];

// const attachedBytes = [
//   '53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6c6974792e53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6ce4fcd0a8c5971994263664e30f20b34878024d578ae8872bc746dd9230fc232f000000000000001477616c6c65740000000000000000000000000000000000000000000000000004000000005d27016b000000000000000000000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b02700000d0f55139d66c0d5b99f02171bc30b588372d2dc5fcfa35196fc385e066d000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8077616c6c657400000000016be05df0a10000000000000000000000000000007f000000000000fae0000000000000000000000000000000000000000000000000',
//   '83d2ea6d7638933e6813b10043c4aa592e35ecb503687f3115d71ca5dfad3b76d091bbbf7a3bacc055a89f3722a18d0896e651b8f467d617bee742a9735fd67dc1693a4b5855505dc46dbb483ae16bf048fb45a75540f389af40becd5a76500ff897f5bb4cb74ec2fcb5d38aaf7fe22b0579786e49cca3663350181b32e108e461becbaae8a7233c0a0abaf25dd5919c5c5930828146760a876a8e03256a801ef1782879b13061fc61219286a30767d2d51364bf264901ac47d61dab82ec407668d264a29cf430640e00966453e6a9231924d7806b52cfcf421cee784797c6243afeb5ef926ec1ed1a07cef87638de59b70ce3eb3d90d9b2e531b71bf27ca7bfa4e3bfad33fd9ab69c996cd15162b467c83f7ab855f067320c47dd051a56d8aa6f767d0fe5e4a5c48eb79d08e2d52c3c2c2cb5538f7c7c55c665e716bf1ca74f94f7e5613738baf83e2f9b20e05879f907995ab5ceef358f25e41faed1f6dc2df65faa1234f72cff3902294d3643ca2a37b4d6d84c5b34b42ba6ab2c14477a3a5825bbec33dce8d50ba2201264d7176d7aa7c2a02b7e23fbc73e0c0f2cc69f679d863065f3523edd4dd5e74c15bf83005b157e6cdd771c72df6cbcdfe8c73e67c09eeecd85e0d6cca6e1262f30c3ea1cdb22152311a30a8db6defcd823c1605c4823c6c6ab9d2547fce9674512eebb73fb52a54b60417c97c4a1df8555493172c212548bd3c4b596bf24b16c36aaa69a5ecaf5a8240232380b0a26539b6b8619ffffffffffffffb00000000000000000000000000000000000000000000000000000000000000000000000005d27016b000000000000000100000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b027000000b811d7f6847fae6e577d75c1475199817c2c3816e2ec626ca0bf5c7f3fa00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000000000000000000000016be05df0100000000000000000000000000000007f0000000000004007000000000000000000000000000000000000000000000000',
c9dcb190094bd7e994b72145866a3df2927b2a26a63b724bc25d4d6ae4b000000000000003c0000000000000000000000000000000000000000000000000000000000000000000000005d27016b000000000000000200000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b027000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000000000000000000000016be05dee400000000000000000000000000000007f000000000000e332000000000000000000000000000000000000000000000000' 
// ];

// const defaultResultMap = {
//     checkConsistency: { state: false },
//     getBalances: { balances: ['10'] },
//     getTransactionsToApprove: {
//         trunkTransaction: EMPTY_HASH_TXBYTES,
//         branchTransaction: EMPTY_HASH_TXBYTES,
//     },
//     findTransactions: { hashes: ['a'.repeat(64)] },
//     getTransactionStrings: { TxBytes: milestoneBytes },
//     wereAddressesSpentFrom: { states: [false, false] },
//     getNodeInfo: {
//         appVersion: '1',
//         latestMilestone: LATEST_MILESTONE,
//         latestSolidSubtangleMilestone: LATEST_SOLID_SUBTANGLE_MILESTONE,
//         latestMilestoneIndex: LATEST_MILESTONE_INDEX,
//         latestSolidSubtangleMilestoneIndex: LATEST_SOLID_SUBTANGLE_MILESTONE_INDEX,
//     },
//     getInclusionStates: { states: [false, false] },
//     attachToTangle: { TxBytes: attachedBytes },
// };

// const setupNock = (resultMap = defaultResultMap) => {
//     return nock('http://localhost:14265', {
//         reqheaders: {
//             'Content-Type': 'application/json',
//             'X-HELIX-API-Version': IRI_API_VERSION,
//         },
//         filteringScope: () => true,
//     })
//         .filteringRequestBody(() => '*')
//         .persist()
//         .post('/', '*')
//         .reply(200, (_, body) => {
//             return resultMap[body.command] || {};
//         });
// };

// const destroyNock = () => nock.cleanAll();

// describe('libs: helix/recovery', () => {
//     describe('#sweep', () => {
//         let seed;
//         let validInput;
//         let validTransfer;
//         let seedStore;

//         before(() => {
//             seed = 'f'.repeat(64);
//             validInput = {
//                 address: 'a803c12e6c6818758909c1fa115ee08f9c715bb0fe7d4cc343186ca4c27603fa',
//                 balance: 10, 
//                 keyIndex: 1,
//                 security: 2,
//             };

//             validTransfer = {
//                 address: '5e4d98d49f63da581da73e0ba6d620a8139ed9a06dea03b40e5ddcf0563f8194',
//                 value: 10,
//                 message: '',
//                 tag: '',
//             };

//             seedStore = {
//                 // Pass in extended nativeModule
//                 offloadPow: true,
//                 performPow: () =>
//                     Promise.resolve({
//                         TxBytes: attachedBytes,
//                         transactionObject: map(attachedBytes, asTransactionObject),
//                     }),
//                 getDigest: (txBytes) => Promise.resolve(asTransactionObject(txBytes).hash),
//             };
//         });

//         describe('when input is invalid', () => {
//             beforeEach(() => {
//                 setupNock();
//             });

//             afterEach(() => {
//                 destroyNock();
//             });

//             // it('should throw with an error "Invalid input."', () => {
//             //     return sweep(null)(seedStore, seed, assign({}, validInput, { address: undefined }), validTransfer)
//             //         .then(() => {
//             //             throw new Error();
//             //         })
//             //         .catch((err) => {
//             //             expect(err.message).to.equal('Invalid input.');
//             //         });
//             // });
//         });

//         describe('when transfer is invalid', () => {
//             beforeEach(() => {
//                 setupNock();
//             });

//             afterEach(() => {
//                 destroyNock();
//             });

//             // it('should throw with an error "Invalid transfer."', () => {
//             //     return sweep(null)(seedStore, seed, validInput, assign({}, validTransfer, { value: null }))
//             //         .then(() => {
//             //             throw new Error();
//             //         })
//             //         .catch((err) => {
//             //             expect(err.message).to.equal('Invalid transfer.');
//             //         });
//             // });
//         });

//         describe('when input address equals transfer address', () => {
//             beforeEach(() => {
//                 setupNock();
//             });

//             afterEach(() => {
//                 destroyNock();
//             });

//             // it('should throw with an error "Cannot sweep to same address."', () => {
//             //     return sweep(null)(
//             //         seedStore,
//             //         seed,
//             //         assign({}, validInput, { address: 'f'.repeat(64) }),
//             //         assign({}, validTransfer, { address: 'f'.repeat(64) }),
//             //     )
//             //         .then(() => {
//             //             throw new Error();
//             //         })
//             //         .catch((err) => {
//             //             expect(err.message).to.equal('Cannot sweep to same address.');
//             //         });
//             // });
//         });

//         describe('when latest balance on input address is changed', () => {
//             beforeEach(() => {
//                 setupNock(merge({}, defaultResultMap, { getBalances: { balances: ['5'] } }));
//             });

//             afterEach(() => {
//                 destroyNock();
//             });

//             // it('should throw with an error "Balance mismatch."', () => {
//             //     return sweep(null)(seedStore, seed, validInput, validTransfer)
//             //         .then(() => {
//             //             throw new Error();
//             //         })
//             //         .catch((err) => {
//             //             expect(err.message).to.equal('Balance mismatch.');
//             //         });
//             // });
//         });

//         describe('when has pending incoming transactions on input address', () => {
//             describe('when transaction bundles are valid', () => {
//                 describe('when inputs still have enough funds to spend', () => {
//                     beforeEach(() => {
//                         const resultMap = merge({}, defaultResultMap, {
//                             findTransactions: {
//                                 hashes: [
//                                     '0000cfd544f2b42d388ae4171700ff2ed548a27ab8687807eda67b47952eb5bb',
//                                     '000086ba91b9b6cb85142cd1178ba878f112a2d0fee28de16ccf1d82a1705803',
//                                     '0000b36639f9e84bbb715b3f197a2691c3404a6f55be6a0ca9183ee44c260487'

//                                 ],
//                             },
//                             getTransactionStrings: {
//                                 TxBytes: 
//                                 [
e4d98d49f63da581da73e0ba6d620a8139ed9a06dea03b40e5ddcf0563f8194000000000000000a0900000000000000000000000000000000000000000000000000000000000000000000005d35bccd000000000000000000000000000000027c5613e95135f0394352a49a61b22bbccc3a78a73c5d6504dca7cf1772bde2a9000086ba91b9b6cb85142cd1178ba878f112a2d0fee28de16ccf1d82a1705803004edd97769ac6f70d7c3e0ccbbe1dcf4911f95475579f417493049983ff599309000000000000000000016c19e9a0b00000000000000000000000000000007f000000000000953c000000000000000000000000000000000000000000000000',
//                                 '72c2a1805a2e941c4a4dd87763b4834c51befde9739b0edf13f9debc2a66e87fe1fe32553b19abefc008512075c12c31d757a1a43e378b5cdb6ec00ab008556179031796fc00982b6a12d14335d063457bbf245baad7dab000d975665e94194c42499271e64add40b239709e032bb2edcdaa1e813580de61e32bd9c8f1ca7bac98d15b0719d901cc4dae37a0fee9a0ce81c26f7a5c4ee801ce2a6a031c4719aa9c35e58c63261dca6d921f437e4beebe40bcdb2b687f7c9e9dd7a0005761ca00935f6a6299acc5aa93d418dae9632de60620928e5594a4c5c31c3c9f2b43a2520a024e4c1686f737ea8f04f79bb55027e523c3aad795c90b831425f96a7b0bb6cbd3892a808eb49df675496969c846877ca6a05afd4c73106ecb81a6d9e357376f9667b95bad42f448a67738ae36bddd6a90c68e389283f89d38f5275938f49e5bcd1792042adb9cf9bd4bce0ea620df317b0d8f6fce60da90b01694a0261755f93e65cad1a26cb6aa17bcdd0ca14f90f3c182b022303e4d79876f93b1f78c0437ae47766a8de9d427451f9498b1eb380adc3fba5bbdc763e066211feeca083466db2ae82325cb36d4d52a1b33cbf862c430161227cef1afc65676816c7f5551e388e38f264567240ddf50f11eeb48bae99e439a34167804c8fc519d36e4750fbdb8ad326ec360ffb22f31209f41fa997170870c464c3ee55bb13a8fc3931117a803c12e6c6818758909c1fa115ee08f9c715bb0fe7d4cc343186ca4c27603fafffe18000000000a0000000000000000000000000000000000000000000000000000000000000000000000005d35bccd000000000000000100000000000000027c5613e95135f0394352a49a61b22bbccc3a78a73c5d6504dca7cf1772bde2a90000b36639f9e84bbb715b3f197a2691c3404a6f55be6a0ca9183ee44c260487004edd97769ac6f70d7c3e0ccbbe1dcf4911f95475579f417493049983ff599300000000000000000000016c19e99fba0000000000000000000000000000007f0000000000008178000000000000000000000000000000000000000000000000',
e844a4bc2c58eb12e4870b0d518d046aaa212da2ed01d36c104824b6119cb130001e7ffffffffec0000000000000000000000000000000000000000000000000000000000000000000000005d35bccd000000000000000200000000000000027c5613e95135f0394352a49a61b22bbccc3a78a73c5d6504dca7cf1772bde2a9004edd97769ac6f70d7c3e0ccbbe1dcf4911f95475579f417493049983ff5993004edd97769ac6f70d7c3e0ccbbe1dcf4911f95475579f417493049983ff599300000000000000000000016c19e99ef10000000000000000000000000000007f0000000000007610000000000000000000000000000000000000000000000000' 
//                             ]                     
//                             },
//                             getLatestInclusion: { states: [false] },
//                         });

//                         nock('http://localhost:14265', {
//                             reqheaders: {
//                                 'Content-Type': 'application/json',
//                                 'X-HELIX-API-Version': IRI_API_VERSION,
//                             },
//                             filteringScope: () => true,
//                         })
//                             .filteringRequestBody(() => '*')
//                             .persist()
//                             .post('/', '*')
//                             .reply(200, (_, body) => {
//                                 if (
//                                     body.command === 'getTransactionStrings' &&
//                                     includes(
//                                         body.hashes,
//                                         // Return milestone txBytes to mimic the scenario of checking if a node is healthy.
//                                         LATEST_MILESTONE,
//                                     )
//                                 ) {
//                                     return { TxBytes: milestoneBytes };
//                                 } else if (body.command === 'getInclusionStates') {
//                                     return { states: [false] };
//                                 }

//                                 return resultMap[body.command] || {};
//                             });
//                     });

//                     afterEach(() => {
//                         destroyNock();
//                     });

//                     it('should promote pending transactions', () => {
//                         console.log("This is inside");
                        
//                         const stub = sinon
//                             .stub(transferUtils, 'promoteTransactionTilConfirmed')
//                             .returns(() => Promise.resolve({}));                        
//                         return (
//                             sweep(null)(seedStore, seed, validInput, validTransfer)
//                                 // Because provided seed is incorrect, it will lead to incorrect signatures and will throw
//                                 .catch((err) => {
//                                     console.log('reched inside hhj'+err);
//                                     expect(err.message).to.equal('Invalid bundle');
//                                     expect(stub.called).to.equal(true);

//                                     stub.restore();
//                                 })
//                         );
//                     });
//                 });

//                 describe('when inputs does not have enough funds to spend', () => {
//                     beforeEach(() => {
//                         const resultMap = merge({}, defaultResultMap, {
//                             findTransactions: {
//                                 hashes: [
//                                     '0000cc63ebd028013d752ba8bf4a033ecab34bfa6869a93e2e3d4518a2a015be',
//                                     '0000e377fad9120fec394d1ac53fc696ec749123ee025df1b91bf0b9fdbda619',
//                                     '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',       ],
//                             },
//                             getTransactionStrings: {
//                                 TxBytes: [
//                                     '53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6c6974792e53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6c6974790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4fcd0a8c5971994263664e30f20b34878024d578ae8872bc746dd9230fc232f000000000000000077616c6c65740000000000000000000000000000000000000000000000000000000000005d26fba60000000000000000000000000000000071955f6d5ac68afa7e8af2b59e5f61cc71dff265c8f654d4d65184b77ba5200d000091a3d5cbbb3ffae5e4db68ad70b85ca70a7edde9e71930366b808373c90e000091a3d5cbbb3ffae5e4db68ad70b85ca70a7edde9e71930366b808373c90e77616c6c657400000000016be0470b0a0000000000000000000000000000007f0000000000023069000000000000000000000000000000000000000000000000',
//                                     '53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6c6974792e53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6ce4fcd0a8c5971994263664e30f20b34878024d578ae8872bc746dd9230fc232f000000000000000077616c6c65740000000000000000000000000000000000000000000000000000000000005d26fc1c00000000000000000000000000000000b14f4f5dbf5c36930c9a110e658dcf92156d2565098a05545a1a929604e7c7170000cc63ebd028013d752ba8bf4a033ecab34bfa6869a93e2e3d4518a2a015be0000cc63ebd028013d752ba8bf4a033ecab34bfa6869a93e2e3d4518a2a015be77616c6c657400000000016be048d9710000000000000000000000000000007f000000000000c22a000000000000000000000000000000000000000000000000',
//                                     '53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6c6974792e53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6ce4fcd0a8c5971994263664e30f20b34878024d578ae8872bc746dd9230fc232f000000000000000077616c6c65740000000000000000000000000000000000000000000000000006000000005d26fc2100000000000000000000000000000000bea70fbb5b5a5ac0176b0bae3282604d50ef70b8bc14e5fd708b7a0a08386ccd0000e377fad9120fec394d1ac53fc696ec749123ee025df1b91bf0b9fdbda6190000e377fad9120fec394d1ac53fc696ec749123ee025df1b91bf0b9fdbda61977616c6c657400000000016be048eaa50000000000000000000000000000007f00000000000039aa000000000000000000000000000000000000000000000000'
//                         ],
//                             },
//                             getLatestInclusion: { states: [false] },
//                         });

//                         nock('http://localhost:14265', {
//                             reqheaders: {
//                                 'Content-Type': 'application/json',
//                                 'X-HELIX-API-Version': IRI_API_VERSION,
//                             },
//                             filteringScope: () => true,
//                         })
//                             .filteringRequestBody(() => '*')
//                             .persist()
//                             .post('/', '*')
//                             .reply(200, (_, body) => {
//                                 if (
//                                     body.command === 'getBalances' &&
//                                     includes(
//                                         body.addresses,
//                                         // Return zero balance to mimic the scenario of non-funded input of pending transaction.
//                                         'e4fcd0a8c5971994263664e30f20b34878024d578ae8872bc746dd9230fc232f',
//                                     )
//                                 ) {
//                                     return { balances: ['0'] };
//                                 } else if (
//                                     body.command === 'getTransactionStrings' &&
//                                     includes(
//                                         body.hashes,
//                                         // Return milestone txBytes to mimic the scenario of checking if a node is healthy.
//                                         LATEST_MILESTONE,
//                                     )
//                                 ) {
//                                     return { TxBytes: milestoneBytes };
//                                 } else if (body.command === 'getTransactionsToApprove') {
//                                     return {
//                                         // Extracted from attachedBytes
//                                         trunkTransaction:
//                                             '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',
//                                         branchTransaction:
//                                             '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',
//                                     };
//                                 }

//                                 return resultMap[body.command] || {};
//                             });
//                     });

//                     afterEach(() => {
//                         destroyNock();
//                     });

//                     // it('should not promote pending transactions', () => {
//                     //     const stub = sinon.stub(transferUtils, 'promoteTransactionTilConfirmed');

//                     //     return (
//                     //         sweep(null)(seedStore, seed, validInput, validTransfer)
//                     //             // Because provided seed is incorrect, it will lead to incorrect signatures and will throw
//                     //             .catch((err) => {
//                     //                 expect(err.message).to.equal('Invalid bundle');
//                     //                 expect(stub.called).to.equal(false);

//                     //                 stub.restore();
//                     //             })
//                     //     );
//                     // });

//                     // it('should not block sweeps from input address', () => {
//                     //     return sweep(null)(
//                     //         seedStore,
//                     //         'aa99a9a9aa999aaaa999a999a9aaaaa999a9a999aaa9999aa99aaa9aaaa9a9aa',
//                     //         validInput,
//                     //         validTransfer,
//                     //     ).then(({ txBytes }) => {
//                     //         expect(txBytes).to.eql(attachedBytes);
//                     //     });
//                     // });
//                 });
//             });

//             describe('when transaction bundles are invalid', () => {
//                 beforeEach(() => {
//                     const invalidBytes = map(
//                         [
//                             '53616d706c65207472616e7361637acadf6e20666f7220636865636b696e672066756e6374696f6e616e6c6974792e53616d706c65207472616e73616374696f6e20666f7220636865636b696e672066756e6374696f6e616e6ce4fcd0a8c5971994263664e30f20b34878024d578ae8872bc746dd9230fc232f000000000000001477616c6c65740000000000000000000000000000000000000000000000000004000000005d27016b000000000000000000000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b02700000d0f55139d66c0d5b99f02171bc30b588372d2dc5fcfa35196fc385e066d000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8077616c6c657400000000016be05df0a10000000000000000000000000000007f000000000000fae0000000000000000000000000000000000000000000000000',
//                             '83d2ea6d7638933e6813b10043c4aa592e35ecb503687f3115d71caedcad3b76d091bbbf7a3bacc055a89f3722a18d0896e651b8f467d617bee742a9735fd67dc1693a4b5855505dc46dbb483ae16bf048fb45a75540f389af40becd5a76500ff897f5bb4cb74ec2fcb5d38aaf7fe22b0579786e49cca3663350181b32e108e461becbaae8a7233c0a0abaf25dd5919c5c5930828146760a876a8e03256a801ef1782879b13061fc61219286a30767d2d51364bf264901ac47d61dab82ec407668d264a29cf430640e00966453e6a9231924d7806b52cfcf421cee784797c6243afeb5ef926ec1ed1a07cef87638de59b70ce3eb3d90d9b2e531b71bf27ca7bfa4e3bfad33fd9ab69c996cd15162b467c83f7ab855f067320c47dd051a56d8aa6f767d0fe5e4a5c48eb79d08e2d52c3c2c2cb5538f7c7c55c665e716bf1ca74f94f7e5613738baf83e2f9b20e05879f907995ab5ceef358f25e41faed1f6dc2df65faa1234f72cff3902294d3643ca2a37b4d6d84c5b34b42ba6ab2c14477a3a5825bbec33dce8d50ba2201264d7176d7aa7c2a02b7e23fbc73e0c0f2cc69f679d863065f3523edd4dd5e74c15bf83005b157e6cdd771c72df6cbcdfe8c73e67c09eeecd85e0d6cca6e1262f30c3ea1cdb22152311a30a8db6defcd823c1605c4823c6c6ab9d2547fce9674512eebb73fb52a54b60417c97c4a1df8555493172c212548bd3c4b596bf24b16c36aaa69a5ecaf5a8240232380b0a26539b6b8619ffffffffffffffb00000000000000000000000000000000000000000000000000000000000000000000000005d27016b000000000000000100000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b027000000b811d7f6847fae6e577d75c1475199817c2c3816e2ec626ca0bf5c7f3fa00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000000000000000000000016be05df0100000000000000000000000000000007f0000000000004007000000000000000000000000000000000000000000000000',
//                             '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003dacbc9dcb190094bd7e994b72145866a3df2927b2a26a63b724bc25d4d6ae4b000000000000003c0000000000000000000000000000000000000000000000000000000000000000000000005d27016b000000000000000200000000000000021e2b52c87e6749b751716fe11d6074c90baa0ef1d89f1a3c03b12fa8de7b027000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb8000000000000000000000016be05dee400000000000000000000000000000007f000000000000e332000000000000000000000000000000000000000000000000' 
//                             ],
//                         (byteString) => `${'0'.repeat(1536)}${byteString.slice(1536)}`,
//                     );

//                     const resultMap = merge({}, defaultResultMap, {
//                         findTransactions: {
//                             hashes: [
//                                 '0000cc63ebd028013d752ba8bf4a033ecab34bfa6869a93e2e3d4518a2a015be',
//                                 '0000e377fad9120fec394d1ac53fc696ec749123ee025df1b91bf0b9fdbda619',
//                                 '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',      ],
//                         },
//                         getTransactionStrings: {
//                             TxBytes: invalidBytes,
//                         },
//                         getTransactionsToApprove: {
//                             // Extracted from attachedBytes
//                             trunkTransaction:
//                                 '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',
//                             branchTransaction:
//                                 '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',
//                         },
//                     });

//                     nock('http://localhost:14265', {
//                         reqheaders: {
//                             'Content-Type': 'application/json',
//                             'X-HELIX-API-Version': IRI_API_VERSION,
//                         },
//                         filteringScope: () => true,
//                     })
//                         .filteringRequestBody(() => '*')
//                         .persist()
//                         .post('/', '*')
//                         .reply(200, (_, body) => {
//                             if (
//                                 body.command === 'getTransactionStrings' &&
//                                 includes(
//                                     body.hashes,
//                                     // Return milestone txBytes to mimic the scenario of checking if a node is healthy.
//                                     LATEST_MILESTONE,
//                                 )
//                             ) {
//                                 return { TxBytes: milestoneBytes };
//                             }

//                             return resultMap[body.command] || {};
//                         });
//                 });

//                 afterEach(() => {
//                     destroyNock();
//                 });

//                 // it('should not block input address from spending', () => {
//                 //     return sweep(null)(
//                 //         seedStore,
//                 //         'aa99a9a9aa999aaaa999a999a9aaaaa999a9a999aaa9999aa99aaa9aaaa9a9aa',
//                 //         validInput,
//                 //         validTransfer,
//                 //     ).then(({ TxBytes }) => {
//                 //         expect(TxBytes).to.eql(attachedBytes);
//                 //     });
//                 // });
//             });
//         });

//         describe('when has outgoing transactions from input address', () => {
//             describe('when transaction bundles are valid', () => {
//                 beforeEach(() => {
//                     const resultMap = merge({}, defaultResultMap, {
//                         // Return the attached signed Bytes as a result
//                         // To mimic the scenario of an outgoing transaction from input address
//                         getTransactionStrings: { TxBytes: attachedBytes },
//                     });

//                     nock('http://localhost:14265', {
//                         reqheaders: {
//                             'Content-Type': 'application/json',
//                             'X-HELIX-API-Version': IRI_API_VERSION,
//                         },
//                         filteringScope: () => true,
//                     })
//                         .filteringRequestBody(() => '*')
//                         .persist()
//                         .post('/', '*')
//                         .reply(200, (_, body) => {
//                             if (
//                                 body.command === 'getTransactionStrings' &&
//                                 includes(
//                                     body.hashes,
//                                     // Return milestone Bytes to mimic the scenario of checking if a node is healthy.
//                                     LATEST_MILESTONE,
//                                 )
//                             ) {
//                                 return { TxBytes: milestoneBytes };
//                             }

//                             return resultMap[body.command] || {};
//                         });
//                 });

//                 afterEach(() => {
//                     destroyNock();
//                 });

//                 // it('should throw with an error "Already spent from addresses"', () => {
//                 //     return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
//                 //         expect(err.message).to.equal('Already spent from addresses');
//                 //     });
//                 // });
//             });

//             describe('when transaction bundles are invalid', () => {
//                 beforeEach(() => {
//                     const resultMap = merge({}, defaultResultMap, {
//                         // Return the signed Bytes as a result
//                         // To mimic the scenario of an outgoing transaction from input address
//                         // signedBytes do not have the valid hash, so the bundle should be invalid
//                         // and input addresses should not be blocked from spending
//                         getTransactionStrings: { TxBytes: validSignedBytes },
//                         getTransactionsToApprove: {
//                             // Extracted from attachedBytes
//                             trunkTransaction:
//                                 '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',
//                             branchTransaction:
//                                 '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',
//                         },
//                     });

//                     nock('http://localhost:14265', {
//                         reqheaders: {
//                             'Content-Type': 'application/json',
//                             'X-HELIX-API-Version': IRI_API_VERSION,
//                         },
//                         filteringScope: () => true,
//                     })
//                         .filteringRequestBody(() => '*')
//                         .persist()
//                         .post('/', '*')
//                         .reply(200, (_, body) => {
//                             if (
//                                 body.command === 'getTransactionStrings' &&
//                                 includes(
//                                     body.hashes,
//                                     // Return milestone txBytes to mimic the scenario of checking if a node is healthy.
//                                     LATEST_MILESTONE,
//                                 )
//                             ) {
//                                 return { TxBytes: milestoneBytes };
//                             }

//                             return resultMap[body.command] || {};
//                         });
//                 });

//                 afterEach(() => {
//                     destroyNock();
//                 });

//                 // it('should not block input address from spending', () => {
//                 //     return sweep(null)(
//                 //         seedStore,
//                 //         // Pass in correct seed
//                 //         'aa99a9a9aa999aaaa999a999a9aaaaa999a9a999aaa9999aa99aaa9aaaa9a9aa',
//                 //         validInput,
//                 //         validTransfer,
//                 //     ).then(({ txBytes }) => {
//                 //         expect(txBytes).to.eql(attachedBytes);
//                 //     });
//                 // });
//             });
//         });

//         describe('when recipient address is spent', () => {
//             beforeEach(() => {
//                 setupNock(merge({}, defaultResultMap, { wereAddressesSpentFrom: { states: [false, true] } }));
//             });

//             afterEach(() => {
//                 destroyNock();
//             });

//             // it('should throw with an error "Already spent from addresses"', () => {
//             //     return sweep()({}, seed, validInput, validTransfer).catch((err) => {
//             //         expect(err.message).to.equal('Already spent from addresses');
//             //     });
//             // });
//         });

//         describe('when input address is spent', () => {
//             beforeEach(() => {
//                 setupNock(merge({}, defaultResultMap, { wereAddressesSpentFrom: { states: [true, false] } }));
//             });

//             afterEach(() => {
//                 destroyNock();
//             });

//             // it('should throw with an error "Already spent from addresses"', () => {
//             //     return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
//             //         expect(err.message).to.equal('Already spent from addresses');
//             //     });
//             // });
//         });

//         describe('when signed bundle is invalid', () => {
//             beforeEach(() => {
//                 setupNock();
//             });

//             afterEach(() => {
//                 destroyNock();
//             });

//             // it('should throw with an error "Invalid bundle"', () => {
//             //     // Seed is fake, so if all checks pass and it prepares transfers the signatures will be invalid
//             //     return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
//             //         expect(err.message).to.equal('Invalid bundle');
//             //     });
//             // });
//         });

//         describe('when signed bundle is valid', () => {
//             beforeEach(() => {
//                 setupNock(
//                     merge({}, defaultResultMap, {
//                         getTransactionsToApprove: {
//                             // Extracted from attachedBytes
//                             trunkTransaction:
//                                 '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',
//                             branchTransaction:
//                                 '00009acb6542adcf9ea06d738548a90e8518c900cb9f4d649efc6f0ef6a3cb80',
//                         },
//                     }),
//                 );
//             });

//             afterEach(() => {
//                 destroyNock();
//             });

//             // it('should return correct transaction txBytes', () => {
//             //     return sweep(null)(
//             //         seedStore,
//             //         // Pass in correct seed
//             //         'aa99a9a9aa999aaaa999a999a9aaaaa999a9a999aaa9999aa99aaa9aaaa9a9aa',
//             //         validInput,
//             //         validTransfer,
//             //     ).then(({ txBytes }) => {
//             //         expect(txBytes).to.eql(attachedBytes);
//             //     });
//             // });
//         });
//     });
// });
