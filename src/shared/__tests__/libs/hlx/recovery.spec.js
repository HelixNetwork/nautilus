import assign from 'lodash/assign';
import includes from 'lodash/includes';
import map from 'lodash/map';
import merge from 'lodash/merge';
import nock from 'nock';
import { expect } from 'chai';
import sinon from 'sinon';
import { sweep } from '../../../libs/hlx/recovery';
import { asTransactionObject } from '@helixnetwork/transaction-converter';
import {
    LATEST_MILESTONE,
    LATEST_MILESTONE_INDEX,
    LATEST_SOLID_SUBTANGLE_MILESTONE,
    LATEST_SOLID_SUBTANGLE_MILESTONE_INDEX,
} from '../../__samples__/transactions';
import { milestoneBytes } from '../../__samples__/txBytes';
import * as transferUtils from '../../../libs/hlx/transfers';
import { IRI_API_VERSION } from '../../../config';
import { EMPTY_HASH_TXBYTES } from '../../../libs/hlx/utils';

const validSignedBytes = 
[ 
    '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164838c044a83bbe80ce4bd24547442ae6d496caa5496c4746ae71470c13b4ed000000000000000a000000000000000000000000000000000000000000000000000000000000001c000000005d3ca7b900000000000000000000000000000002f199e67c235a5a65543530a8572e55192a9322395ac6996dcaf3f3c31bc982e9000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c00000000000000000000016c34ef35b10000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000',
    '5aabe329a63abe008d8de1c8a9d224f996025ee81c37c07b207d3947c79bdf91ef5173f7303c37ee816f920148eef48e5735a289e97e646e1e9e5d2240e24d1e39d09b12331eeb66e00f6affa322611acdacd7a6a05a69d399caa2aae690ced75515aa491613a95018ed6ecdf728ec139f71962183317ed4147cc2c3408c228646249aa69cef7ae3f3bfe63873f2446222bd3975d56bffc1d2b639e8796cd4a4d0402a1651553c61dab31f1bb1a2c7d35364142db5d7746a5d8399d676a00a28d0402a1651553c61dab31f1bb1a2c7d35364142db5d7746a5d8399d676a00a28a63ad8e3ab0f60c3c3002d333793ee065e4b3335c5282d73edbda356908cc5600a765f2a5271cf626eb5fb1f643bf13b14203ab7797ea0bc62e0e12c660f736a0a765f2a5271cf626eb5fb1f643bf13b14203ab7797ea0bc62e0e12c660f736a556ff1de6e58904e8462b79c3f8e18c4021280adc99274a885c1a42caf1705707e1a766e6fb4a8b5606f5117f891ced754c9aaeed7dbd72a6edbbe191dfd4818f7f24960b3b1c1ef31c533ab49b5ed98e69da310dc790737c60e55ada3aad4fdd10efb0fa266b19d0f14d51eff98118ee0ca031a05c1ea508e8b2a90d9183005c2493b68fbd4b329b159ba206f3510c8adc54043e288ea041efb7cbf6211117f64e22bb0a61eea6bc018bcf49619419a020d43e925c687d756781ef2604594f91245e733c1abf577cff3056880f9963ae6170e4bd02c53dcea9db9501e8d52e1fffffffffffffff60000000000000000000000000000000000000000000000000000000000000000000000005d3ca7b900000000000000010000000000000002f199e67c235a5a65543530a8572e55192a9322395ac6996dcaf3f3c31bc982e9000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c00000000000000000000016c34ef352e0000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000',
    'c2493b68fbd4b329b159ba206f3510c8adc54043e288ea041efb7cbf6211117f0a765f2a5271cf626eb5fb1f643bf13b14203ab7797ea0bc62e0e12c660f736ac8cf0c3d91b54c6785bc46046a5c9872367f68e0fb8f117e7ce982500010fa2853bd1216f7b6cb7f33ce366611f3ae5a48a826826d3c3d3468d9ab7635ba14953416a382acd8aa7d65d83b334aa67099ad6a1c076c355faca34a735d7bb0edb02d0bd7af133faeabbb8a4a789b4a70d2e941167fc85c7273615e663c0cc2a558e02350c0c5e92cd352f9de844faa388c4c6743572bbcc2c0d0e994108badbc37c8cf0c3d91b54c6785bc46046a5c9872367f68e0fb8f117e7ce982500010fa28f9801e197e4794fbbd8d1c314a0c00a06dd2601573ad690964046db3e683fe74a72735544b570d4a00dc6e3c995cf1e2c84447719720a10dceab2423ce927fd77c791462751635d87844fb8af9e556565a97254664d523327db52635c04861ed944bd7e165e4635211b92923eb52f96a4ac11a0a871ab581ce65db713ca977dff4650e1b6de0c0738c87390f825acd42a753b20f6e7a5eb74f4c59679993d8bb7c791462751635d87844fb8af9e556565a97254664d523327db52635c04861edc61d34b667c9847a64d83b976e225dd60928c142ef18759e20d6a222fc2caa52adc1701c21b42c2b82b139e59b872e8d9cb6498e61e415d10c3f037ce5a994391245e733c1abf577cff3056880f9963ae6170e4bd02c53dcea9db9501e8d52e100000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d3ca7b900000000000000020000000000000002f199e67c235a5a65543530a8572e55192a9322395ac6996dcaf3f3c31bc982e9000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c00000000000000000000016c34ef35160000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000' 
];  

const attachedBytes = 
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000010000000000000000000000000000000000000000000000000000000000000051000000005d3caec7000000000000000000000000000000025890b353e2ecae4b78ae806ae1881343d723612a0e377b2587b1eb90ccc1499e0000c96b6906b059eb49294017fbb4b3f929722a2fb6bdc819ee39a99cb0414100f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa300000000000000000000016c350ac42d0000000000000000000000000000007f000000000001d8fe000000000000000000000000000000000000000000000000',
 '39d09b12331eeb66e00f6affa322611acdacd7a6a05a69d399caa2aae690ced75515aa491613a95018ed6ecdf728ec139f71962183317ed4147cc2c3408c2286eedc9d7199b41aeaee8eb92d1898063136640910b58cf58ce66519ca50843fa2d10efb0fa266b19d0f14d51eff98118ee0ca031a05c1ea508e8b2a90d918300539d09b12331eeb66e00f6affa322611acdacd7a6a05a69d399caa2aae690ced7bf212d95258630a10f63fa7b5f8dd40d0853897573c26abf649102090c0ef2877e1a766e6fb4a8b5606f5117f891ced754c9aaeed7dbd72a6edbbe191dfd481887d31468dd385525444083242027402506740817ea31dbd7e37a8d4c2022eea15515aa491613a95018ed6ecdf728ec139f71962183317ed4147cc2c3408c2286f7f24960b3b1c1ef31c533ab49b5ed98e69da310dc790737c60e55ada3aad4fd684374ccb9814804dac869eef2a43a3ecb27dc8feb9450d2a71d5e82e07daa73d0402a1651553c61dab31f1bb1a2c7d35364142db5d7746a5d8399d676a00a28bf212d95258630a10f63fa7b5f8dd40d0853897573c26abf649102090c0ef287d0402a1651553c61dab31f1bb1a2c7d35364142db5d7746a5d8399d676a00a2864e22bb0a61eea6bc018bcf49619419a020d43e925c687d756781ef2604594f987d31468dd385525444083242027402506740817ea31dbd7e37a8d4c2022eea11245e733c1abf577cff3056880f9963ae6170e4bd02c53dcea9db9501e8d52e1ffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000005d3caec7000000000000000100000000000000025890b353e2ecae4b78ae806ae1881343d723612a0e377b2587b1eb90ccc1499e0000e34e73da851e99ba79479973a75b12b84c057f253b4e2601ec5436b4569c00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa300000000000000000000016c350ac2a50000000000000000000000000000007f000000000000d87b000000000000000000000000000000000000000000000000',
 '9262f44af167fd1bc8ce2cac3dd8762c4f78857242e0a705176665132f3b697864e22bb0a61eea6bc018bcf49619419a020d43e925c687d756781ef2604594f9a8e83edb5a69125ad3b46db9f731907f01b66e5310e82570cbd0339d2824239e556ff1de6e58904e8462b79c3f8e18c4021280adc99274a885c1a42caf170570e02350c0c5e92cd352f9de844faa388c4c6743572bbcc2c0d0e994108badbc372d0bd7af133faeabbb8a4a789b4a70d2e941167fc85c7273615e663c0cc2a558a8e83edb5a69125ad3b46db9f731907f01b66e5310e82570cbd0339d2824239e944bd7e165e4635211b92923eb52f96a4ac11a0a871ab581ce65db713ca977df64e22bb0a61eea6bc018bcf49619419a020d43e925c687d756781ef2604594f97c791462751635d87844fb8af9e556565a97254664d523327db52635c04861eda72735544b570d4a00dc6e3c995cf1e2c84447719720a10dceab2423ce927fd7f9801e197e4794fbbd8d1c314a0c00a06dd2601573ad690964046db3e683fe7402310cc0d22262edb5c181e51f1e89e52b565a2a632c55cfe95c3ff140172f422f2e73bd711efcdfd0c7db4744e2154cbf685c63f8630cb5d0001bc5546ad89f2f2e73bd711efcdfd0c7db4744e2154cbf685c63f8630cb5d0001bc5546ad89f78dbe906f9db2487f72be0895c6aa0d901344649ae33101beacf06458547df281245e733c1abf577cff3056880f9963ae6170e4bd02c53dcea9db9501e8d52e100000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d3caec7000000000000000200000000000000025890b353e2ecae4b78ae806ae1881343d723612a0e377b2587b1eb90ccc1499e00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa300f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa300000000000000000000016c350ac2590000000000000000000000000000007f0000000000001b94000000000000000000000000000000000000000000000000' 
]; 

const defaultResultMap = {
    checkConsistency: { state: false },
    getBalances: { balances: ['10'] },
    getTransactionsToApprove: {
        trunkTransaction: EMPTY_HASH_TXBYTES,
        branchTransaction: EMPTY_HASH_TXBYTES,
    },
    findTransactions: { hashes: ['a'.repeat(64)] },
    getTransactionStrings: { txs: milestoneBytes },
    wereAddressesSpentFrom: { states: [false, false] },
    getNodeInfo: {
        appVersion: '1',
        latestMilestone: LATEST_MILESTONE,
        latestSolidSubtangleMilestone: LATEST_SOLID_SUBTANGLE_MILESTONE,
        latestMilestoneIndex: LATEST_MILESTONE_INDEX,
        latestSolidSubtangleMilestoneIndex: LATEST_SOLID_SUBTANGLE_MILESTONE_INDEX,
    },
    getInclusionStates: { states: [false, false] },
    attachToTangle: { txs: attachedBytes },
};

const setupNock = (resultMap = defaultResultMap) => {
    return nock('http://localhost:14265', {
        reqheaders: {
            'Content-Type': 'application/json',
            'X-HELIX-API-Version': IRI_API_VERSION,
        },
        filteringScope: () => true,
    })
        .filteringRequestBody(() => '*')
        .persist()
        .post('/', '*')
        .reply(200, (_, body) => {
            return resultMap[body.command] || {};
        });
};

const destroyNock = () => nock.cleanAll();

describe('libs: helix/recovery', () => {
    describe('#sweep', () => {
        let seed;
        let validInput;
        let validTransfer;
        let seedStore;

        before(() => {
            seed = 'f'.repeat(64);
            validInput = {
                address: '1245e733c1abf577cff3056880f9963ae6170e4bd02c53dcea9db9501e8d52e1',
                balance: 10, 
                keyIndex: 0,
                security: 2,
            };

            validTransfer = {
                address: '164838c044a83bbe80ce4bd24547442ae6d496caa5496c4746ae71470c13b4ed',
                value: 10,
                message: '',
                tag: '',
            };

            seedStore = {
                // Pass in extended nativeModule
                offloadPow: true,
                performPow: () =>
                    Promise.resolve({
                        txs: attachedBytes,
                        transactionObject: map(attachedBytes, asTransactionObject),
                    }),
                getDigest: (txs) => Promise.resolve(asTransactionObject(txs).hash),
            };
        });

        describe('when input is invalid', () => {
            beforeEach(() => {
                setupNock();
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Invalid input."', () => {
                return sweep(null)(seedStore, seed, assign({}, validInput, { address: undefined }), validTransfer)
                    .then(() => {
                        throw new Error();
                    })
                    .catch((err) => {
                        expect(err.message).to.equal('Invalid input.');
                    });
            });
        });

        describe('when transfer is invalid', () => {
            beforeEach(() => {
                setupNock();
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Invalid transfer."', () => {
                return sweep(null)(seedStore, seed, validInput, assign({}, validTransfer, { value: null }))
                    .then(() => {
                        throw new Error();
                    })
                    .catch((err) => {
                        expect(err.message).to.equal('Invalid transfer.');
                    });
            });
        });

        describe('when input address equals transfer address', () => {
            beforeEach(() => {
                setupNock();
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Cannot sweep to same address."', () => {
                return sweep(null)(
                    seedStore,
                    seed,
                    assign({}, validInput, { address: 'f'.repeat(64) }),
                    assign({}, validTransfer, { address: 'f'.repeat(64) }),
                )
                    .then(() => {
                        throw new Error();
                    })
                    .catch((err) => {
                        expect(err.message).to.equal('Cannot sweep to same address.');
                    });
            });
        });

        describe('when latest balance on input address is changed', () => {
            beforeEach(() => {
                setupNock(merge({}, defaultResultMap, { getBalances: { balances: ['5'] } }));
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Balance mismatch."', () => {
                return sweep(null)(seedStore, seed, validInput, validTransfer)
                    .then(() => {
                        throw new Error();
                    })
                    .catch((err) => {
                        expect(err.message).to.equal('Balance mismatch.');
                    });
            });
        });

        describe('when has pending incoming transactions on input address', () => {
            describe('when transaction bundles are valid', () => {
                describe('when inputs still have enough funds to spend', () => {
                    beforeEach(() => {
                        const resultMap = merge({}, defaultResultMap, {
                            findTransactions: {
                                hashes: [
                                    '0000bbea301dca1b9ccea4ff66f99e8d9503fb81046a11b28f7a5eea1d535ecc',
                                    '00003ea7f4471f18a3ef3805059f6352e34d8679dda2d604fb3da5a4a6b79ccb',
                                    '0000e7cd76c782f68fdb66d0d04d3a25ab4b7937178c7f7685f5895196acc223'

                                ],
                            },
                            getTransactionStrings: {
                                txs: 
e733c1abf577cff3056880f9963ae6170e4bd02c53dcea9db9501e8d52e100000000000000010000000000000000000000000000000000000000000000000000000000000080000000005d3dd48900000000000000000000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c00003ea7f4471f18a3ef3805059f6352e34d8679dda2d604fb3da5a4a6b79ccb00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c398644190000000000000000000000000000007f0000000000003335000000000000000000000000000000000000000000000000',
                                  '0360d77813491179c60ae258289123ed996c77e5f98f98da4ff09542eebd188f3a6e159466a7e6bade016739f33bf84380385bbe3d3fa05b434f4e1e084ea543b711ca8907e4eb19b456ff93da4fe0f5251acf11efd5bcf16be012d5fad6ffb00360d77813491179c60ae258289123ed996c77e5f98f98da4ff09542eebd188fa9c34a4159745647556cfd5d5c6441d79a91e2d38d521c2e3b4f89596edd688af613fae61a6a1b0abb21e5d68f17cbe7f548ac5c6a785ccd50e42aa1adb1a5770f5d4e2fa12823e23d16bc79dbdf66be2e1decbce30a45b9ca4976da1d11ac95920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e1851cfff5c20fcd526b473fd7d5e37582438accfbb413faed7a6f7e2d5d36746b920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e1e2e11099b5ecca96d65d12ec0bb2736405b55a7b27a81175e7e092bb44187aef767d07971977292f2a70b4f97c3ae5c990c72acbdef1676a961662b5766976e0c7a3ff484b6eab18fef424f0b4f668bbad483f329f534dd74a3249d49103cabba3679fcdce2a41d31fad61a6b7031d7dd090036c5a2b795178b2d630c4f16a7d4a5988f3c2a881a69ba1873965ac68cf0d73c761c199b846764073995088b6554a5988f3c2a881a69ba1873965ac68cf0d73c761c199b846764073995088b65543ad30058f25d524ab6d86e6a7290fab67c1d70aeea10d55f1b7908f30547a13ffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000005d3dd48900000000000000010000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c0000e7cd76c782f68fdb66d0d04d3a25ab4b7937178c7f7685f5895196acc22300925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c398642d20000000000000000000000000000007f000000000000f0e3000000000000000000000000000000000000000000000000',
                                  '4fd0e8d8669649e25d80dbb4d50a107e012d114523aaa592e4880266fd2c854c559e6e323db267b21fee67aafdb74274ff1851282b134f632c97a46e0b16d6e1920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e12ba3446416848351b50a71f82b9a7f2d9aca5c69f2825fea1c30cbd23f8cd70dc9e2c27440296d63525c0904960d7fdf0481c5c787a68bb5f0736809cccc24b92ba3446416848351b50a71f82b9a7f2d9aca5c69f2825fea1c30cbd23f8cd70dc7a3ff484b6eab18fef424f0b4f668bbad483f329f534dd74a3249d49103cabb6865be3bbb792d686184c3417cd3ba02269a414cb3cdd970e5ddd474c461139fff31c7d535227338db3cdaa046c52263743a7064b1a144e7249d37d2f44289adff31c7d535227338db3cdaa046c52263743a7064b1a144e7249d37d2f44289ad0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f4c9dcf4ad5d51c5bc6a4bc3d5adce0ce299e365d5177d9ce824379cc964165e02843b2dc83e03818ac9b037095bb963e6b66cd10646b6d2ad1c75e15abf8cc9b18da94944e342511a90bb653d1d7acd263edbdee0ade6c77cf6ab16b106b12a743ad30058f25d524ab6d86e6a7290fab67c1d70aeea10d55f1b7908f30547a1300000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d3dd48900000000000000020000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c3986420f0000000000000000000000000000007f00000000000057c0000000000000000000000000000000000000000000000000' 
                                ]                                         },
                            getLatestInclusion: { states: [false] },
                        });

                        nock('http://localhost:14265', {
                            reqheaders: {
                                'Content-Type': 'application/json',
                                'X-HELIX-API-Version': IRI_API_VERSION,
                            },
                            filteringScope: () => true,
                        })
                            .filteringRequestBody(() => '*')
                            .persist()
                            .post('/', '*')
                            .reply(200, (_, body) => {
                                if (
                                    body.command === 'getTransactionStrings' &&
                                    includes(
                                        body.hashes,
                                        // Return milestone txs to mimic the scenario of checking if a node is healthy.
                                        LATEST_MILESTONE,
                                    )
                                ) {
                                    return { txs: milestoneBytes };
                                } else if (body.command === 'getInclusionStates') {
                                    return { states: [false] };
                                }

                                return resultMap[body.command] || {};
                            });
                    });

                    afterEach(() => {
                        destroyNock();
                    });

                    it('should promote pending transactions', () => {
                        const stub = sinon
                            .stub(transferUtils, 'promoteTransactionTilConfirmed')
                            .returns(() => Promise.resolve({}));                        
                        return (
                            sweep(null)(seedStore, seed, validInput, validTransfer)
                                // Because provided seed is incorrect, it will lead to incorrect signatures and will throw
                                .catch((err) => {
                                    expect(err.message).to.equal('Invalid bundle');
                                    expect(stub.called).to.equal(true);

                                    stub.restore();
                                })
                        );
                    });
                });

                describe('when inputs does not have enough funds to spend', () => {
                    beforeEach(() => {
                        const resultMap = merge({}, defaultResultMap, {
                            findTransactions: {
                                hashes: [
                                    '0000bbea301dca1b9ccea4ff66f99e8d9503fb81046a11b28f7a5eea1d535ecc',
                                    '00003ea7f4471f18a3ef3805059f6352e34d8679dda2d604fb3da5a4a6b79ccb',
                                    '0000e7cd76c782f68fdb66d0d04d3a25ab4b7937178c7f7685f5895196acc223'

                                ],
                            },
                            getTransactionStrings: {
                                txs: 
                                [ 
                                  '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001245e733c1abf577cff3056880f9963ae6170e4bd02c53dcea9db9501e8d52e100000000000000010000000000000000000000000000000000000000000000000000000000000080000000005d3dd48900000000000000000000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c00003ea7f4471f18a3ef3805059f6352e34d8679dda2d604fb3da5a4a6b79ccb00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c398644190000000000000000000000000000007f0000000000003335000000000000000000000000000000000000000000000000',
                                  '0360d77813491179c60ae258289123ed996c77e5f98f98da4ff09542eebd188f3a6e159466a7e6bade016739f33bf84380385bbe3d3fa05b434f4e1e084ea543b711ca8907e4eb19b456ff93da4fe0f5251acf11efd5bcf16be012d5fad6ffb00360d77813491179c60ae258289123ed996c77e5f98f98da4ff09542eebd188fa9c34a4159745647556cfd5d5c6441d79a91e2d38d521c2e3b4f89596edd688af613fae61a6a1b0abb21e5d68f17cbe7f548ac5c6a785ccd50e42aa1adb1a5770f5d4e2fa12823e23d16bc79dbdf66be2e1decbce30a45b9ca4976da1d11ac95920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e1851cfff5c20fcd526b473fd7d5e37582438accfbb413faed7a6f7e2d5d36746b920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e1e2e11099b5ecca96d65d12ec0bb2736405b55a7b27a81175e7e092bb44187aef767d07971977292f2a70b4f97c3ae5c990c72acbdef1676a961662b5766976e0c7a3ff484b6eab18fef424f0b4f668bbad483f329f534dd74a3249d49103cabba3679fcdce2a41d31fad61a6b7031d7dd090036c5a2b795178b2d630c4f16a7d4a5988f3c2a881a69ba1873965ac68cf0d73c761c199b846764073995088b6554a5988f3c2a881a69ba1873965ac68cf0d73c761c199b846764073995088b65543ad30058f25d524ab6d86e6a7290fab67c1d70aeea10d55f1b7908f30547a13ffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000005d3dd48900000000000000010000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c0000e7cd76c782f68fdb66d0d04d3a25ab4b7937178c7f7685f5895196acc22300925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c398642d20000000000000000000000000000007f000000000000f0e3000000000000000000000000000000000000000000000000',
                                  '4fd0e8d8669649e25d80dbb4d50a107e012d114523aaa592e4880266fd2c854c559e6e323db267b21fee67aafdb74274ff1851282b134f632c97a46e0b16d6e1920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e12ba3446416848351b50a71f82b9a7f2d9aca5c69f2825fea1c30cbd23f8cd70dc9e2c27440296d63525c0904960d7fdf0481c5c787a68bb5f0736809cccc24b92ba3446416848351b50a71f82b9a7f2d9aca5c69f2825fea1c30cbd23f8cd70dc7a3ff484b6eab18fef424f0b4f668bbad483f329f534dd74a3249d49103cabb6865be3bbb792d686184c3417cd3ba02269a414cb3cdd970e5ddd474c461139fff31c7d535227338db3cdaa046c52263743a7064b1a144e7249d37d2f44289adff31c7d535227338db3cdaa046c52263743a7064b1a144e7249d37d2f44289ad0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f4c9dcf4ad5d51c5bc6a4bc3d5adce0ce299e365d5177d9ce824379cc964165e02843b2dc83e03818ac9b037095bb963e6b66cd10646b6d2ad1c75e15abf8cc9b18da94944e342511a90bb653d1d7acd263edbdee0ade6c77cf6ab16b106b12a743ad30058f25d524ab6d86e6a7290fab67c1d70aeea10d55f1b7908f30547a1300000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d3dd48900000000000000020000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c3986420f0000000000000000000000000000007f00000000000057c0000000000000000000000000000000000000000000000000' 
                                ]                            },
                            getLatestInclusion: { states: [false] },
                        });

                        nock('http://localhost:14265', {
                            reqheaders: {
                                'Content-Type': 'application/json',
                                'X-HELIX-API-Version': IRI_API_VERSION,
                            },
                            filteringScope: () => true,
                        })
                            .filteringRequestBody(() => '*')
                            .persist()
                            .post('/', '*')
                            .reply(200, (_, body) => {
                                if (
                                    body.command === 'getBalances' &&
                                    includes(
                                        body.addresses,
                                        // Return zero balance to mimic the scenario of non-funded input of pending transaction.
                                        '43ad30058f25d524ab6d86e6a7290fab67c1d70aeea10d55f1b7908f30547a13',
                                    )
                                ) {
                                    return { balances: ['0'] };
                                } else if (
                                    body.command === 'getTransactionStrings' &&
                                    includes(
                                        body.hashes,
                                        // Return milestone txs to mimic the scenario of checking if a node is healthy.
                                        LATEST_MILESTONE,
                                    )
                                ) {
                                    return { txs: milestoneBytes };
                                } else if (body.command === 'getTransactionsToApprove') {
                                    return {
                                        // Extracted from attachedBytes
                                        trunkTransaction:
                                            '00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa3',
                                        branchTransaction:
                                            '00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa3',
                                    };
                                }

                                return resultMap[body.command] || {};
                            });
                    });

                    afterEach(() => {
                        destroyNock();
                    });

                    it('should not promote pending transactions', () => {
                        const stub = sinon.stub(transferUtils, 'promoteTransactionTilConfirmed');

                        return (
                            sweep(null)(seedStore, seed, validInput, validTransfer)
                                // Because provided seed is incorrect, it will lead to incorrect signatures and will throw
                                .catch((err) => {
                                    expect(err.message).to.equal('Invalid bundle');
                                    expect(stub.called).to.equal(false);

                                    stub.restore();
                                })
                        );
                    });

                    it('should not block sweeps from input address', () => {
                        return sweep(null)(
                            seedStore,
                            'abcd',
                            validInput,
                            validTransfer,
                        ).then(({ txs }) => {
                            expect(txs).to.eql(attachedBytes);
                        });
                    });
                });
            });

            describe('when transaction bundles are invalid', () => {
                beforeEach(() => {
                    const invalidBytes = map(
                        [
e733c1abf577cff3056880f9963ae6170e4bd02c53dcea9db9501e8d52e100000000000000010000000000000000000000000000000000000000000000000000000000000080000000005d3dd48900000000000000000000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c00003ea7f4471f18a3ef3805059f6352e34d8679dda2d604fb3da5a4a6b79ccb00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c398644190000000000000000000000000000007f0000000000003335000000000000000000000000000000000000000000000000',
                            '0360d77813491179c60ae258289123ed996c77e5f98f98da4ff09542eebd188f3a6e159466a7e6bade016739f33bf84380385bbe3d3fa05b434f4e1e084ea543b711ca8907e4eb19b456ff93da4fe0f5251acf11efd5bcf16be012d5fad6ffb00360d77813491179c60ae258289123ed996c77e5f98f98da4ff09542eebd188fa9c34a4159745647556cfd5d5c6441d79a91e2d38d521c2e3b4f89596edd688af613fae61a6a1b0abb21e5d68f17cbe7f548ac5c6a785ccd50e42aa1adb1a5770f5d4e2fa12823e23d16bc79dbdf66be2e1decbce30a45b9ca4976da1d11ac95920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e1851cfff5c20fcd526b473fd7d5e37582438accfbb413faed7a6f7e2d5d36746b920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e1e2e11099b5ecca96d65d12ec0bb2736405b55a7b27a81175e7e092bb44187aef767d07971977292f2a70b4f97c3ae5c990c72acbdef1676a961662b5766976e0c7a3ff484b6eab18fef424f0b4f668bbad483f329f534dd74a3249d49103cabba3679fcdce2a41d31fad61a6b7031d7dd090036c5a2b795178b2d630c4f16a7d4a5988f3c2a881a69ba1873965ac68cf0d73c761c199b846764073995088b6554a5988f3c2a881a69ba1873965ac68cf0d73c761c199b846764073995088b65543ad30058f25d524ab6d86e6a7290fab67c1d70aeea10d55f1b7908f30547a13ffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000005d3dd48900000000000000010000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c0000e7cd76c782f68fdb66d0d04d3a25ab4b7937178c7f7685f5895196acc22300925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c398642d20000000000000000000000000000007f000000000000f0e3000000000000000000000000000000000000000000000000',
                            '4fd0e8d8669649e25d80dbb4d50a107e012d114523aaa592e4880266fd2c854c559e6e323db267b21fee67aafdb74274ff1851282b134f632c97a46e0b16d6e1920315dcf108ccbca56efed03b1ba96cda563d46ef5a098f35f4d61c085774e12ba3446416848351b50a71f82b9a7f2d9aca5c69f2825fea1c30cbd23f8cd70dc9e2c27440296d63525c0904960d7fdf0481c5c787a68bb5f0736809cccc24b92ba3446416848351b50a71f82b9a7f2d9aca5c69f2825fea1c30cbd23f8cd70dc7a3ff484b6eab18fef424f0b4f668bbad483f329f534dd74a3249d49103cabb6865be3bbb792d686184c3417cd3ba02269a414cb3cdd970e5ddd474c461139fff31c7d535227338db3cdaa046c52263743a7064b1a144e7249d37d2f44289adff31c7d535227338db3cdaa046c52263743a7064b1a144e7249d37d2f44289ad0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f0e3e9807edae4df766791ec9bd4ca979660ebdee694cbea6b0f19b883b516c8f4c9dcf4ad5d51c5bc6a4bc3d5adce0ce299e365d5177d9ce824379cc964165e02843b2dc83e03818ac9b037095bb963e6b66cd10646b6d2ad1c75e15abf8cc9b18da94944e342511a90bb653d1d7acd263edbdee0ade6c77cf6ab16b106b12a743ad30058f25d524ab6d86e6a7290fab67c1d70aeea10d55f1b7908f30547a1300000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d3dd48900000000000000020000000000000002308a68b133872d34aacb4dca6767820977e50a0c451dcde4a0404bd1421d876c00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00925861eee1f09fa7a7cd82c9d55d0cb7917b20a8b13be5313861360eda88fd00000000000000000000016c3986420f0000000000000000000000000000007f00000000000057c0000000000000000000000000000000000000000000000000' 
                             
                        ],
                        (byteString) => `${'0'.repeat(1536)}${byteString.slice(1536)}`,
                    );

                    const resultMap = merge({}, defaultResultMap, {
                        findTransactions: {
                            hashes: [
                                '0000bbea301dca1b9ccea4ff66f99e8d9503fb81046a11b28f7a5eea1d535ecc',
                                '00003ea7f4471f18a3ef3805059f6352e34d8679dda2d604fb3da5a4a6b79ccb',
                                '0000e7cd76c782f68fdb66d0d04d3a25ab4b7937178c7f7685f5895196acc223'
                            ],
                        },
                        getTransactionStrings: {
                            txs: invalidBytes,
                        },
                        getTransactionsToApprove: {
                            // Extracted from attachedBytes
                            trunkTransaction:
                                '00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa3',
                            branchTransaction:
                                '00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa3',
                        },
                    });

                    nock('http://localhost:14265', {
                        reqheaders: {
                            'Content-Type': 'application/json',
                            'X-HELIX-API-Version': IRI_API_VERSION,
                        },
                        filteringScope: () => true,
                    })
                        .filteringRequestBody(() => '*')
                        .persist()
                        .post('/', '*')
                        .reply(200, (_, body) => {
                            if (
                                body.command === 'getTransactionStrings' &&
                                includes(
                                    body.hashes,
                                    // Return milestone txBytes to mimic the scenario of checking if a node is healthy.
                                    LATEST_MILESTONE,
                                )
                            ) {
                                return { txs: milestoneBytes };
                            }

                            return resultMap[body.command] || {};
                        });
                });

                afterEach(() => {
                    destroyNock();
                });

                it('should not block input address from spending', () => {
                    return sweep(null)(
                        seedStore,
                        'abcd',
                        validInput,
                        validTransfer,
                    ).then(({ txs }) => {
                        expect(txs).to.eql(attachedBytes);
                    });
                });
            });
        });

        describe('when has outgoing transactions from input address', () => {
            describe('when transaction bundles are valid', () => {
                beforeEach(() => {
                    const resultMap = merge({}, defaultResultMap, {
                        // Return the attached signed Bytes as a result
                        // To mimic the scenario of an outgoing transaction from input address
                        getTransactionStrings: { txs: attachedBytes },
                    });

                    nock('http://localhost:14265', {
                        reqheaders: {
                            'Content-Type': 'application/json',
                            'X-HELIX-API-Version': IRI_API_VERSION,
                        },
                        filteringScope: () => true,
                    })
                        .filteringRequestBody(() => '*')
                        .persist()
                        .post('/', '*')
                        .reply(200, (_, body) => {
                            if (
                                body.command === 'getTransactionStrings' &&
                                includes(
                                    body.hashes,
                                    // Return milestone Bytes to mimic the scenario of checking if a node is healthy.
                                    LATEST_MILESTONE,
                                )
                            ) {
                                return { txs: milestoneBytes };
                            }

                            return resultMap[body.command] || {};
                        });
                });

                afterEach(() => {
                    destroyNock();
                });

                it('should throw with an error "Already spent from addresses"', () => {
                    return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
                        expect(err.message).to.equal('Already spent from addresses');
                    });
                });
            });

            describe('when transaction bundles are invalid', () => {
                beforeEach(() => {
                    const resultMap = merge({}, defaultResultMap, {
                        // Return the signed Bytes as a result
                        // To mimic the scenario of an outgoing transaction from input address
                        // signedBytes do not have the valid hash, so the bundle should be invalid
                        // and input addresses should not be blocked from spending
                        getTransactionStrings: { txs: validSignedBytes },
                        getTransactionsToApprove: {
                            // Extracted from attachedBytes
                            trunkTransaction:
                                '00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa3',
                            branchTransaction:
                                '00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa3',
                        },
                    });

                    nock('http://localhost:14265', {
                        reqheaders: {
                            'Content-Type': 'application/json',
                            'X-HELIX-API-Version': IRI_API_VERSION,
                        },
                        filteringScope: () => true,
                    })
                        .filteringRequestBody(() => '*')
                        .persist()
                        .post('/', '*')
                        .reply(200, (_, body) => {
                            if (
                                body.command === 'getTransactionStrings' &&
                                includes(
                                    body.hashes,
                                    // Return milestone txBytes to mimic the scenario of checking if a node is healthy.
                                    LATEST_MILESTONE,
                                )
                            ) {
                                return { txs: milestoneBytes };
                            }

                            return resultMap[body.command] || {};
                        });
                });

                afterEach(() => {
                    destroyNock();
                });

                it('should not block input address from spending', () => {
                    return sweep(null)(
                        seedStore,
                        // Pass in correct seed
                        'abcd',
                        validInput,
                        validTransfer,
                    ).then(({ txs }) => {
                        expect(txs).to.eql(attachedBytes);
                    });
                });
            });
        });

        describe('when recipient address is spent', () => {
            beforeEach(() => {
                setupNock(merge({}, defaultResultMap, { wereAddressesSpentFrom: { states: [false, true] } }));
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Already spent from addresses"', () => {
                return sweep()({}, seed, validInput, validTransfer).catch((err) => {
                    expect(err.message).to.equal('Already spent from addresses');
                });
            });
        });

        describe('when input address is spent', () => {
            beforeEach(() => {
                setupNock(merge({}, defaultResultMap, { wereAddressesSpentFrom: { states: [true, false] } }));
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Already spent from addresses"', () => {
                return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
                    expect(err.message).to.equal('Already spent from addresses');
                });
            });
        });

        describe('when signed bundle is invalid', () => {
            beforeEach(() => {
                setupNock();
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Invalid bundle"', () => {
                // Seed is fake, so if all checks pass and it prepares transfers the signatures will be invalid
                return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
                    expect(err.message).to.equal('Invalid bundle');
                });
            });
        });

        describe('when signed bundle is valid', () => {
            beforeEach(() => {
                setupNock(
                    merge({}, defaultResultMap, {
                        getTransactionsToApprove: {
                            // Extracted from attachedBytes
                            trunkTransaction:
                                '00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa3',
                            branchTransaction:
                                '00f91b24e416ac25aca2a945178ec2a34822e1423acabc0818477a915569eaa3',
                        },
                    }),
                );
            });

            afterEach(() => {
                destroyNock();
            });

            it('should return correct transaction txBytes', () => {
                return sweep(null)(
                    seedStore,
                    // Pass in correct seed
                    'abcd',
                    validInput,
                    validTransfer,
                ).then(({ txs }) => {
                    expect(txs).to.eql(attachedBytes);
                });
            });
        });
    });
});
